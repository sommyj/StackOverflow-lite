{"version":3,"sources":["questions.js"],"names":["models","Question","renameFile","fsHelper","deleteFile","fileTypeHandleError","errorHandler","fileSizeHandleError","questionHandlerError","upload","dest","fileSizeLimit","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","tempPath","path","targetPath","Date","toISOString","originalname","mimetype","size","substring","length","authMethod","authMethodArray","noTokenProviderError","failedAuth","decodedID","token","body","query","headers","jwt","verify","app","get","err","decoded","id","questionsController","single","create","res","authValues","failedAuthError","decodedIDFromMethod","status","send","auth","message","title","question","tags","data","userId","questionImage","findAll","then","results","questions","rows","questionCount","result","catch","e","name","constraint","list"],"mappings":"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","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport jwt from 'jsonwebtoken';\nimport models from '../models';\nimport app from '../../app';\nimport fsHelper from '../../utilities/fileSystem';\nimport errorHandler from './utilities/errorHandler';\n\nconst [Question] = [models.Question];\nconst renameFile = fsHelper.renameFile;//Rename file helper method\nconst deleteFile = fsHelper.deleteFile;//Delete file helper method\n\nconst fileTypeHandleError = errorHandler.fileTypeHandleError // file type handleError\nconst fileSizeHandleError = errorHandler.fileSizeHandleError // file size handleError\nconst questionHandlerError = errorHandler.questionHandlerError //question handleError\n\nconst upload = multer({\n  dest: './questionsUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false, fileTypeError = false, filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./questionsUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else { deleteFile(tempPath); fileSizeError = true; }\n    } else { deleteFile(tempPath); fileTypeError = true; }\n  }\n  fileErrorArray[0] = fileSizeError; fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n/* Authentication handle method */\nconst authMethod = (req) => {\n  const authMethodArray = [];\n  let noTokenProviderError = false;\n  let failedAuth = false;\n  let decodedID;\n\n  // check header or url parameters or post parameters for token\n  const token = req.body.token || req.query.token || req.headers['x-access-token'];\n  if (!token) {\n    if (req.file) deleteFile(`./${req.file.path}`);\n    noTokenProviderError = true;\n  }\n\n  // verifies secret and checks exp\n  jwt.verify(token, app.get('superSecret'), (err, decoded) => {\n    if (err) {\n      if (!noTokenProviderError) {\n        if (req.file) deleteFile(`./${req.file.path}`);\n        failedAuth = true;\n      }\n    } else decodedID = decoded.id;\n  });\n\n  authMethodArray[0] = noTokenProviderError;\n  authMethodArray[1] = failedAuth;\n  authMethodArray[2] = decodedID;\n\n  return authMethodArray;\n};\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a user\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n    if (failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req);\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      question: req.body.question,\n      userId: decodedID,\n      tags: req.body.tags,\n      questionImage: filePath,\n    };\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then((results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (data.title === question.title) questionHandlerError(res, filePath);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        Question.create(data) // pass data to our model\n          .then((result) => { const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((e) => {\n            if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n            if (e.name === 'error' && e.constraint === 'questions_userid_fkey')\n              return res.status(400).send({ message: 'user has been removed from the database' });\n            return res.status(400).send(e);\n          });\n      }\n    }).catch(e => res.status(400).send(e));\n  },\n  list(req, res) {\n    Question.findAll().then((results) => {\n      const questions = results.rows;\n      return res.status(200).send(questions);\n    }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default questionsController;\n"]}