{"version":3,"sources":["answer.js"],"names":["Answer","create","data","queryStatement","text","values","response","userId","questionId","answerImage","update","id","accepted","vote","findById","name","findOne","key","Object","keys","where","destroy","force"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,SAAS;AACbC,QADa,kBACNC,IADM,EACA;AACX;AACA,QAAMC,iBAAiB;AACrBC,sHADqB;AAGrBC,cAAQ,CAACH,KAAKI,QAAN,EAAgBJ,KAAKK,MAArB,EAA6BL,KAAKM,UAAlC,EAA8CN,KAAKO,WAAnD;AAHa,KAAvB;;AAMA;AACA,WAAO,qBAAMN,cAAN,CAAP;AACD,GAXY;AAYbO,QAZa,kBAYNR,IAZM,EAYA;AACX;AACA,QAAMC,iBAAiB;AACrBC,0JADqB;AAGrBC,cAAQ,CAACH,KAAKS,EAAN,EAAUT,KAAKI,QAAf,EAAyBJ,KAAKU,QAA9B,EAAwCV,KAAKW,IAA7C,EAAmDX,KAAKO,WAAxD;AAHa,KAAvB;;AAMA;AACA,WAAO,qBAAMN,cAAN,CAAP;AACD,GAtBY;AAuBbW,UAvBa,oBAuBJH,EAvBI,EAuBA;AACX;AACA,QAAMR,iBAAiB;AACrBY,YAAM,cADe;AAErBX,YAAM,qCAFe;AAGrBC,cAAQ,CAACM,EAAD;AAHa,KAAvB;;AAMA;AACA,WAAO,qBAAMR,cAAN,CAAP;AACD,GAjCY;AAkCba,SAlCa,mBAkCLd,IAlCK,EAkCC;AACZ,QAAMe,MAAMC,OAAOC,IAAP,CAAYjB,KAAKkB,KAAjB,EAAwB,CAAxB,CAAZ;AACA,QAAMjB,iBAAiB;AACrB;AACAY,YAAM,cAFe;AAGrBX,6CAAqCa,GAArC,UAHqB;AAIrBZ,cAAQ,CAACH,KAAKkB,KAAL,CAAWH,GAAX,CAAD;AAJa,KAAvB;;AAOA;AACA,WAAO,qBAAMd,cAAN,CAAP;AACD,GA7CY;AA8CbkB,SA9Ca,mBA8CLnB,IA9CK,EA8CC;AACZ,QAAIC,uBAAJ;AACA,QAAI,CAACD,KAAKkB,KAAL,CAAWT,EAAZ,IAAkBT,KAAKoB,KAA3B,EAAkC;AAChCnB,uBAAiB;AACfC,cAAM;AADS,OAAjB;AAGD,KAJD,MAIO;AACLD,uBAAiB;AACfC,cAAM,mCADS;AAEfC,gBAAQ,CAACH,KAAKkB,KAAL,CAAWT,EAAZ;AAFO,OAAjB;AAID;;AAED;AACA,WAAO,qBAAMR,cAAN,CAAP;AACD;AA7DY,CAAf;;kBAgEeH,M","file":"answer.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/models","sourcesContent":["import query from './database/query';\n\nconst Answer = {\n  create(data) {\n    // SQL Query > Insert Data\n    const queryStatement = {\n      text: `INSERT INTO answers(response, userId, questionId, answerImage)\n      values($1, $2, $3, $4) RETURNING *`,\n      values: [data.response, data.userId, data.questionId, data.answerImage],\n    };\n\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  update(data) {\n    // SQL Query > Update Data\n    const queryStatement = {\n      text: `UPDATE answers SET response = $2, accepted = $3, vote = $4,\n      answerImage = $5, updatedAt = CURRENT_TIMESTAMP WHERE id = $1 RETURNING *`,\n      values: [data.id, data.response, data.accepted, data.vote, data.answerImage],\n    };\n\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  findById(id) {\n    // select a answer\n    const queryStatement = {\n      name: 'fetch-answer',\n      text: 'SELECT * FROM answers WHERE id = $1',\n      values: [id]\n    };\n\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  findOne(data) {\n    const key = Object.keys(data.where)[0];\n    const queryStatement = {\n      // give the query a unique username and password\n      name: 'fetch-answer',\n      text: `SELECT * FROM answers WHERE ${key} = $1`,\n      values: [data.where[key]]\n    };\n\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  destroy(data) {\n    let queryStatement;\n    if (!data.where.id && data.force) {\n      queryStatement = {\n        text: 'DELETE FROM answers',\n      };\n    } else {\n      queryStatement = {\n        text: 'DELETE FROM answers WHERE id=($1)',\n        values: [data.where.id],\n      };\n    }\n\n    // require our query executor into our model\n    return query(queryStatement);\n  }\n};\n\nexport default Answer;\n"]}