{"version":3,"sources":["users.js"],"names":["models","User","renameFile","fsHelper","deleteFile","upload","dest","fileSizeLimit","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","tempPath","path","targetPath","Date","toISOString","originalname","mimetype","size","substring","length","usersController","single","create","body","username","password","email","gender","send","hashedPassword","bcrypt","hashSync","data","title","firstname","lastname","country","phone","userImage","findAll","then","results","users","rows","userCount","user","result","auth","catch","e","check","findOne","where","passIsEqual","compareSync"],"mappings":";;;;;;ypBAAA;AACA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;WAEe,CAACA,iBAAOC,IAAR,C;IAARA,I;;AACP,IAAMC,aAAaC,qBAASD,UAA5B;AACA,IAAME,aAAaD,qBAASC,UAA5B;;AAEA,IAAMC,SAAS,sBAAO;AACpBC,QAAM;AADc,CAAP,CAAf;;AAIA,IAAMC,gBAAgB,OAAO,IAAP,GAAc,CAApC;;AAEA;AACA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACnCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uCAAX,EAAoDC,OAAO,IAA3D,EAArB;AACD,CAFD;;AAIA;AACA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACL,GAAD,EAAS;AACnCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mCAAX,EAAgDC,OAAO,IAAvD,EAArB;AACD,CAFD;;AAIA;AACA,IAAME,cAAc,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC9B,MAAMC,QAAQC,uBAAIC,IAAJ,CACZ,EAAEC,IAAIJ,MAAN,EADY,EACIK,cAAIC,GAAJ,CAAQ,aAAR,CADJ,EAEZ,EAAEC,WAAW,KAAb,CAAoB;AAApB,GAFY,CAAd;AAIA,SAAON,KAAP;AACD,CAND;;AAQA;AACA,IAAMO,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAS;AAChC,MAAMC,iBAAiB,EAAvB;AACA,MAAIC,gBAAgB,KAApB;AAAA,MAA2BC,gBAAgB,KAA3C;AAAA,MAAkDC,WAAW,EAA7D;;AAEA,MAAIJ,IAAIK,IAAR,EAAc;AACZ,QAAMC,kBAAgBN,IAAIK,IAAJ,CAASE,IAA/B;AACA,QAAMC,kCAA+B,IAAIC,IAAJ,GAAWC,WAAX,KAA2BV,IAAIK,IAAJ,CAASM,YAAnE,CAAN;AACA,QAAIX,IAAIK,IAAJ,CAASO,QAAT,KAAsB,YAAtB,IAAsCZ,IAAIK,IAAJ,CAASO,QAAT,KAAsB,WAAhE,EAA6E;AAC3E,UAAIZ,IAAIK,IAAJ,CAASQ,IAAT,IAAiB/B,aAArB,EAAoC;AAClCL,mBAAW6B,QAAX,EAAqBE,UAArB;AACA;AACAJ,mBAAWI,WAAWM,SAAX,CAAqB,CAArB,EAAwBN,WAAWO,MAAnC,CAAX;AACD,OAJD,MAIO;AAAEpC,mBAAW2B,QAAX,EAAsBJ,gBAAgB,IAAhB;AAAuB;AACvD,KAND,MAMO;AAAEvB,iBAAW2B,QAAX,EAAsBH,gBAAgB,IAAhB;AAAuB;AACvD;AACDF,iBAAe,CAAf,IAAoBC,aAApB,CAAmCD,eAAe,CAAf,IAAoBE,aAApB;AACnCF,iBAAe,CAAf,IAAoBG,QAApB;;AAEA,SAAOH,cAAP;AACD,CAnBD;;AAsBA,IAAMe,kBAAkB;AACtBpC,UAAQA,OAAOqC,MAAP,CAAc,WAAd,CADc,EACc;AACpCC,QAFsB,kBAEflB,GAFe,EAEVhB,GAFU,EAEL;AAAE;AACjB;AADe,4BAEkCe,iBAAiBC,GAAjB,CAFlC;AAAA;AAAA,QAERE,aAFQ;AAAA,QAEOC,aAFP;AAAA,QAEsBC,QAFtB;;AAGf,QAAIF,aAAJ,EAAmB,OAAOb,oBAAoBL,GAApB,CAAP;AACnB,QAAImB,aAAJ,EAAmB,OAAOpB,oBAAoBC,GAApB,CAAP;AACnB;AACA,QAAI,CAACgB,IAAImB,IAAJ,CAASC,QAAV,IAAsB,CAACpB,IAAImB,IAAJ,CAASE,QAAhC,IAA4C,CAACrB,IAAImB,IAAJ,CAASG,KAAtD,IAA+D,CAACtB,IAAImB,IAAJ,CAASI,MAA7E,EAAqF;AACnF,UAAInB,QAAJ,EAAczB,kBAAgByB,QAAhB,EADqE,CACxC;AAC3C,aAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAErC,SAAS,kBAAX,EAArB,CAAP;AACD;AACD;AACA,QAAMsC,iBAAiBC,mBAAOC,QAAP,CAAgB3B,IAAImB,IAAJ,CAASE,QAAzB,EAAmC,CAAnC,CAAvB;AACA;AACA,QAAMO,OAAO;AACXC,aAAO7B,IAAImB,IAAJ,CAASU,KADL;AAEXC,iBAAW9B,IAAImB,IAAJ,CAASW,SAFT;AAGXC,gBAAU/B,IAAImB,IAAJ,CAASY,QAHR;AAIXX,gBAAUpB,IAAImB,IAAJ,CAASC,QAJR;AAKXC,gBAAUI,cALC;AAMXH,aAAOtB,IAAImB,IAAJ,CAASG,KANL;AAOXC,cAAQvB,IAAImB,IAAJ,CAASI,MAPN;AAQXS,eAAShC,IAAImB,IAAJ,CAASa,OARP;AASXC,aAAOjC,IAAImB,IAAJ,CAASc,KATL;AAUXC,iBAAW9B;AAVA,KAAb;AAYA;;AAEA5B,SAAK2D,OAAL,GAAeC,IAAf,CAAoB,UAACC,OAAD,EAAa;AAC/B,UAAMC,QAAQD,QAAQE,IAAtB,CAA4B,IAAIC,YAAY,CAAhB;AADG;AAAA;AAAA;;AAAA;AAE/B,6BAAmBF,KAAnB,8HAA0B;AAAA,cAAfG,IAAe;;AACxB,cAAIb,KAAKR,QAAL,KAAkBqB,KAAKrB,QAA3B,EAAqC;AACnC,gBAAIhB,QAAJ,EAAczB,kBAAgByB,QAAhB,EADqB,CACQ;AAC3C,mBAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAErC,SAAS,yBAAX,EAArB,CAAP;AACD;AACD,cAAIyC,KAAKN,KAAL,KAAemB,KAAKnB,KAAxB,EAA+B;AAC7B,gBAAIlB,QAAJ,EAAczB,kBAAgByB,QAAhB,EADe,CACc;AAC3C,mBAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAErC,SAAS,sBAAX,EAArB,CAAP;AACD;AACD,cAAIyC,KAAKK,KAAL,KAAeQ,KAAKR,KAAxB,EAA+B;AAC7B,gBAAI7B,QAAJ,EAAczB,kBAAgByB,QAAhB,EADe,CACc;AAC3C,mBAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAErC,SAAS,sBAAX,EAArB,CAAP;AACD;AACDqD,uBAAa,CAAb;AACD;AAhB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiB/B,UAAIA,cAAcF,MAAMvB,MAAxB,EAAgC;AAAE;AAChCvC,aAAK0C,MAAL,CAAYU,IAAZ,EAAkB;AAAlB,SACGQ,IADH,CACQ,UAACM,MAAD,EAAY;AAChB,cAAMD,OAAOC,OAAOH,IAAP,CAAY,CAAZ,CAAb;AACA,cAAM/C,QAAQF,YAAYmD,KAAK9C,EAAjB,CAAd,CAFgB,CAEoB;AACpC,cAAIH,KAAJ,EAAW,OAAOR,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAEiB,UAAF,EAAQE,MAAM,IAAd,EAAoBnD,YAApB,EAArB,CAAP;AACZ,SALH,EAKKoD,KALL,CAKW;AAAA,iBAAK5D,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqBqB,CAArB,CAAL;AAAA,SALX;AAMD;AACF,KAzBD,EAyBGD,KAzBH,CAyBS;AAAA,aAAK5D,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqBqB,CAArB,CAAL;AAAA,KAzBT;AA0BD,GAvDqB;AAwDtBC,OAxDsB,iBAwDhB9C,GAxDgB,EAwDXhB,GAxDW,EAwDN;AAAE;AAChB;AACAR,SAAKuE,OAAL,CAAa,EAAEC,OAAO,EAAE5B,UAAUpB,IAAImB,IAAJ,CAASC,QAArB,EAAT,EAAb,EACGgB,IADH,CACQ,UAACM,MAAD,EAAY;AAChB,UAAMD,OAAOC,OAAOH,IAAP,CAAY,CAAZ,CAAb;AACA;AACA,UAAI,CAACE,IAAL,EAAW,OAAOzD,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAErC,SAAS,2BAAX,EAArB,CAAP;AACX;AACA,UAAM8D,cAAcvB,mBAAOwB,WAAP,CAAmBlD,IAAImB,IAAJ,CAASE,QAA5B,EAAsCoB,KAAKpB,QAA3C,CAApB;AACA,UAAI,CAAC4B,WAAL,EAAkB,OAAOjE,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAErC,SAAS,2BAAX,EAArB,CAAP;AAClB,UAAMK,QAAQF,YAAYmD,KAAK9C,EAAjB,CAAd,CAPgB,CAOoB;AACpC;AACA,UAAIH,KAAJ,EAAW,OAAOR,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqB,EAAEiB,UAAF,EAAQE,MAAM,IAAd,EAAoBnD,YAApB,EAArB,CAAP;AACZ,KAXH,EAWKoD,KAXL,CAWW;AAAA,aAAK5D,IAAIC,MAAJ,CAAW,GAAX,EAAgBuC,IAAhB,CAAqBqB,CAArB,CAAL;AAAA,KAXX;AAYD;AAtEqB,CAAxB;;kBAyEe7B,e","file":"users.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport models from '../models';\nimport app from '../../app';\nimport fsHelper from './utilities/fileSystem';\n\nconst [User] = [models.User];\nconst renameFile = fsHelper.renameFile;\nconst deleteFile = fsHelper.deleteFile;\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false, fileTypeError = false, filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else { deleteFile(tempPath); fileSizeError = true; }\n    } else { deleteFile(tempPath); fileTypeError = true; }\n  }\n  fileErrorArray[0] = fileSizeError; fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  create(req, res) { // create a user\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req);\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.username || !req.body.password || !req.body.email || !req.body.gender) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n    // Auto-gen a salt and hash\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      firstname: req.body.firstname,\n      lastname: req.body.lastname,\n      username: req.body.username,\n      password: hashedPassword,\n      email: req.body.email,\n      gender: req.body.gender,\n      country: req.body.country,\n      phone: req.body.phone,\n      userImage: filePath\n    };\n    /* Search to see if username, email and phone exist before creation\n    to avoid skipping of id on unique constraint */\n    User.findAll().then((results) => {\n      const users = results.rows; let userCount = 0;\n      for (const user of users) {\n        if (data.username === user.username) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'username already exists' });\n        }\n        if (data.email === user.email) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'email already exists' });\n        }\n        if (data.phone === user.phone) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'phone already exists' });\n        }\n        userCount += 1;\n      }\n      if (userCount === users.length) { // Create user after checking if it exist\n        User.create(data) // pass data to our model\n          .then((result) => {\n            const user = result.rows[0];\n            const token = tokenMethod(user.id); // Generate token\n            if (token) return res.status(201).send({ user, auth: true, token });\n          }).catch(e => res.status(400).send(e));\n      }\n    }).catch(e => res.status(400).send(e));\n  },\n  check(req, res) { // login with username and password\n    // pass data to our model\n    User.findOne({ where: { username: req.body.username } })\n      .then((result) => {\n        const user = result.rows[0];\n        // Returning error message for user not found\n        if (!user) return res.status(400).send({ message: 'Invalid username/password' });\n        // Compare hash from your password DB.\n        const passIsEqual = bcrypt.compareSync(req.body.password, user.password);\n        if (!passIsEqual) return res.status(404).send({ message: 'Invalid username/password' });\n        const token = tokenMethod(user.id); // Generate token\n        // Returning user detais\n        if (token) return res.status(200).send({ user, auth: true, token });\n      }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default usersController;\n"]}