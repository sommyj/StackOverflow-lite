{"version":3,"sources":["users-spec.js"],"names":["process","env","NODE_ENV","chai","should","use","chaiHttp","request","app","model","User","imageStorage","deleteImageFromStorage","fsHelper","deleteFile","describe","beforeEach","done","destroy","where","force","then","it","post","field","attach","end","err","res","have","status","body","be","a","property","eql","user","id","password","userimage","token","console","error"],"mappings":"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","file":"users-spec.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/test","sourcesContent":["import chai from 'chai';\nimport supertest from 'supertest';\nimport path from 'path';\nimport chaiHttp from 'chai-http';\nimport app from '../app';\nimport model from '../server/models';\nimport imageStorage from '../server/controllers/utilities/filebaseStorage';\nimport fsHelper from '../utilities/fileSystem';\n\nprocess.env.NODE_ENV = 'test';\n\nchai.should();\nchai.use(chaiHttp);\nconst request = supertest(app);\nconst [User] = [model.User];\nconst [deleteImageFromStorage] = [imageStorage.deleteImageFromStorage];\n//\n// Delete file helper method\nconst [deleteFile] = [fsHelper.deleteFile];\n\ndescribe('Users', () => {\n  beforeEach((done) => { // Before each test we empty the database\n    User.destroy({ where: {}, force: true }).then(() => done());\n  });\n\n  describe('/POST user', () => {\n    it(`it should not CREATE a user without username, password,\n     email, gender`, (done) => {\n      request\n        .post('/auth/v1/signup')\n        .field('title', 'mr')\n        .field('firstname', '')\n        .field('lastname', '')\n        .field('username', '')\n        .field('password', '')\n        .field('email', '')\n        .field('gender', '')\n        .field('country', '')\n        .field('phone', '')\n        .attach('userImage', './testFile.png')\n        .end((err, res) => {\n          res.should.have.status(206);\n          res.body.should.be.a('object');\n          res.body.should.have.property('message').eql('Incomplete field');\n          done();\n        });\n    });\n\n    it('it should CREATE a user', (done) => {\n      request\n        .post('/auth/v1/signup')\n        .field('title', 'mr')\n        .field('firstname', 'Justin')\n        .field('lastname', 'Ikwuoma')\n        .field('username', 'justman')\n        .field('password', 'abc')\n        .field('email', 'justin@gmail.com')\n        .field('gender', 'male')\n        .field('country', 'Nigeria')\n        .field('phone', '66976498')\n        .attach('userImage', './testFile.png')\n\n        .end(async(err, res) => {\n          res.should.have.status(201);\n          res.body.should.be.a('object');\n          res.body.user.should.have.property('id').eql(res.body.user.id);\n          res.body.user.should.have.property('firstname').eql('Justin');\n          res.body.user.should.have.property('lastname').eql('Ikwuoma');\n          res.body.user.should.have.property('username').eql('justman');\n          res.body.user.should.have.property('email').eql('justin@gmail.com');\n          res.body.user.should.have.property('password').eql(res.body.user.password);\n          res.body.user.should.have.property('gender').eql('male');\n          res.body.user.should.have.property('country').eql('Nigeria');\n          res.body.user.should.have.property('userimage').eql(res.body.user.userimage);\n          res.body.should.have.property('auth').eql(true);\n          res.body.should.have.property('token').eql(res.body.token);\n\n          // delete test image file\n          if (res.body.user.userimage) {\n            try {\n              await deleteImageFromStorage(res.body.user.userimage);\n            } catch(error){\n              console.error(error);\n            }\n          }\n          done();\n        });\n    });\n\n//     it('it should CREATE a user without image', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman1')\n//         .field('password', 'abc')\n//         .field('email', 'justin1@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '669796498')\n//         .attach('userImage', '')\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.body.should.be.a('object');\n//           res.body.user.should.have.property('id').eql(res.body.user.id);\n//           res.body.user.should.have.property('firstname').eql('Justin');\n//           res.body.user.should.have.property('lastname').eql('Ikwuoma');\n//           res.body.user.should.have.property('username').eql('justman1');\n//           res.body.user.should.have.property('email').eql('justin1@gmail.com');\n//           res.body.user.should.have.property('password').eql(res.body.user.password);\n//           res.body.user.should.have.property('gender').eql('male');\n//           res.body.user.should.have.property('country').eql('Nigeria');\n//           res.body.user.should.have.property('userimage').eql('');\n//           res.body.should.have.property('auth').eql(true);\n//           res.body.should.have.property('token').eql(res.body.token);\n//\n//           done();\n//         });\n//     });\n//\n//\n//     it('it should not CREATE a user when image file type not jpg/png', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman2')\n//         .field('password', 'abc')\n//         .field('email', 'justin2@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('dob', '2015-11-04')\n//         .attach('userImage', './testFileType.txt')\n//         .end((err, res) => {\n//           res.should.have.status(403);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').eql('Only .png and .jpg files are allowed!');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it(`it should not CREATE a user\n//       when image file size is larger than 2mb`, (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman3')\n//         .field('password', 'abc')\n//         .field('email', 'justin3@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '366976498')\n//         .attach('userImage', './testFileSize.jpg')\n//         .end((err, res) => {\n//           res.should.have.status(403);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message')\n//             .eql('file should not be more than 2mb!');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it('it should not CREATE a user if username already exist', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'Justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman4',\n//         password: 'abc',\n//         email: 'justin4@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '4466976498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/signup')\n//           .field('title', 'mr')\n//           .field('firstname', 'Justin')\n//           .field('lastname', 'Ikwuoma')\n//           .field('username', 'justman4')\n//           .field('password', 'abc')\n//           .field('email', 'justin1@gmail.com')\n//           .field('gender', 'male')\n//           .field('country', 'Nigeria')\n//           .field('phone', '669796498')\n//           .attach('userImage', '')\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('message').eql('username already exists');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not CREATE a user if email already exist', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'Justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman4',\n//         password: 'abc',\n//         email: 'justin4@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '4466976498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/signup')\n//           .field('title', 'mr')\n//           .field('firstname', 'Justin1')\n//           .field('lastname', 'Ikwuoma')\n//           .field('username', 'justman4')\n//           .field('password', 'abc')\n//           .field('email', 'justin4@gmail.com')\n//           .field('gender', 'male')\n//           .field('country', 'Nigeria')\n//           .field('phone', '669796498')\n//           .attach('userImage', '')\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('message').eql('username already exists');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not CREATE a user if phone already exist', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'Justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman4',\n//         password: 'abc',\n//         email: 'justin4@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '669796498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/signup')\n//           .field('title', 'mr')\n//           .field('firstname', 'Justin1')\n//           .field('lastname', 'Ikwuoma')\n//           .field('username', 'justman4')\n//           .field('password', 'abc')\n//           .field('email', 'justin@gmail.com')\n//           .field('gender', 'male')\n//           .field('country', 'Nigeria')\n//           .field('phone', '669796498')\n//           .attach('userImage', '')\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('message').eql('username already exists');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not get a particular user if POST a wrong username', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman5',\n//         password: 'abc',\n//         email: 'justin5@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '566976498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/login')\n//           .send({ username: 'just', password: 'abc' })\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.message.should.be.eql('Invalid username/password');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not get a particular user if POST a wrong username', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman4')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '669796498')\n//         .attach('userImage', '')\n//         .end(() => {\n//           request\n//             .post('/auth/v1/login')\n//             .send({ username: 'just', password: 'abc' })\n//             .end((err, res) => {\n//               res.should.have.status(400);\n//               res.body.should.be.a('object');\n//               res.body.message.should.be.eql('Invalid username/password');\n//               done();\n//             });\n//         });\n//     });\n//\n//     it('it should POST username && password and get the particular user', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman4')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '669796498')\n//         .attach('userImage', '')\n//         .end(() => {\n//           request\n//             .post('/auth/v1/login')\n//             .send({ username: 'justman4', password: 'abc' })\n//             .end((err, res) => {\n//               res.should.have.status(200);\n//               res.body.should.be.a('object');\n//               res.body.user.should.have.property('id');\n//               res.body.user.should.have.property('firstname').eql('Justin');\n//               res.body.user.should.have.property('lastname').eql('Ikwuoma');\n//               res.body.user.should.have.property('username').eql('justman4');\n//               res.body.user.should.have.property('email').eql('justin@gmail.com');\n//               res.body.user.should.have.property('password').eql(res.body.user.password);\n//               res.body.user.should.have.property('userimage').eql('');\n//               res.body.should.have.property('auth').eql(true);\n//               res.body.should.have.property('token').eql(res.body.token);\n//               done();\n//             });\n//         });\n//     });\n  });\n});\n"]}