{"version":3,"sources":["filebaseStorage.js"],"names":["admin","env","process","NODE_ENV","projectId","PROJECT_ID","key","KEY","replace","bucketName","PROC_BUCKET","DEV_BUCKET","initializeApp","credential","cert","project_id","private_key","client_email","storageBucket","storage","bucket","imageStorage","uploadImageToStorage","file","folder","prom","Promise","resolve","reject","Error","newFileName","originalname","Date","now","fileUpload","blobStream","createWriteStream","metadata","contentType","mimetype","on","error","fileName","name","makePublic","end","buffer","getImageFromStorage","get","then","data","apiResponse","deleteImageFromStorage","delete","console","log","catch","err"],"mappings":";;;;;;AACA;;IAAYA,K;;;;AAEZ,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAxB,C,CAHA;;;AAKA,IAAMC,YAAYF,QAAQD,GAAR,CAAYI,UAA9B;AACA,IAAMC,MAAMJ,QAAQD,GAAR,CAAYM,GAAZ,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgC,IAAhC,CAAZ;AACA,IAAIC,mBAAJ;;AAEA,IAAIR,QAAQ,YAAZ,EAA0B;AACxBQ,eAAaP,QAAQD,GAAR,CAAYS,WAAzB;AACD,CAFD,MAEO;AACLD,eAAaP,QAAQD,GAAR,CAAYU,UAAzB;AACD;;AAED;AACAX,MAAMY,aAAN,CAAoB;AAClBC,cAAYb,MAAMa,UAAN,CAAiBC,IAAjB,CAAsB;AAChCC,gBAAYX,SADoB;AAEhCY,mDAA6CV,GAA7C,kCAFgC;AAGhCW,+CAAyCb,SAAzC;AAHgC,GAAtB,CADM;AAMlBc,iBAAeT;AANG,CAApB;;AASA,IAAMU,UAAUnB,MAAMmB,OAAN,EAAhB;;AAEA,IAAMC,SAASD,QAAQC,MAAR,EAAf;;AAEA,IAAMC,eAAe;AACnB;;;;;;AAMAC,sBAPmB,gCAOEC,IAPF,EAOQC,MAPR,EAOgB;AACjC,QAAMC,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5C,UAAI,CAACL,IAAL,EAAW;AACTK,eAAO,IAAIC,KAAJ,CAAU,eAAV,CAAP;AACD;AACD,UAAMC,cAAiBN,MAAjB,SAA2BD,KAAKQ,YAAhC,SAAgDC,KAAKC,GAAL,EAAtD;;AAEA,UAAMC,aAAad,OAAOG,IAAP,CAAYO,WAAZ,CAAnB;;AAEA,UAAMK,aAAaD,WAAWE,iBAAX,CAA6B;AAC9CC,kBAAU;AACRC,uBAAaf,KAAKgB;AADV;AADoC,OAA7B,CAAnB;;AAMAJ,iBAAWK,EAAX,CAAc,OAAd,EAAuB,UAACC,KAAD,EAAW;AAChCb,eAAOa,KAAP;AACA;AACD,OAHD;;AAKAN,iBAAWK,EAAX,CAAc,QAAd,EAAwB,YAAM;AAC5B,YAAME,WAAWR,WAAWS,IAA5B;;AAEA;AACAvB,eAAOG,IAAP,CAAYmB,QAAZ,EAAsBE,UAAtB,CAAiC,YAAC,sBAA2B,CAAE,CAA/D;;AAEAjB,gBAAQe,QAAR;AACD,OAPD;;AASAP,iBAAWU,GAAX,CAAetB,KAAKuB,MAApB;AACD,KA7BY,CAAb;;AA+BA,WAAOrB,IAAP;AACD,GAxCkB;AAyCnBsB,qBAzCmB,+BAyCCL,QAzCD,EAyCW;AAC5B,QAAMnB,OAAOH,OAAOG,IAAP,CAAYmB,QAAZ,CAAb;;AAEA,WAAOnB,KAAKyB,GAAL,GAAWC,IAAX,CAAgB,UAACC,IAAD,EAAU;AAC/B,UAAMC,cAAcD,KAAK,CAAL,CAApB;AACA,aAAOC,WAAP;AACD,KAHM,CAAP;AAID,GAhDkB;AAiDnBC,wBAjDmB,kCAiDIV,QAjDJ,EAiDc;AAC/B,QAAMnB,OAAOH,OAAOG,IAAP,CAAYmB,QAAZ,CAAb;;AAEAnB,SAAK8B,MAAL,GAAcJ,IAAd,CAAmB,YAAM;AACvBK,cAAQC,GAAR,CAAeb,QAAf;AACD,KAFD,EAGGc,KAHH,CAGS,UAACC,GAAD,EAAS;AACdH,cAAQb,KAAR,CAAc,QAAd,EAAwBgB,GAAxB;AACD,KALH;AAMD;AA1DkB,CAArB;;AA+DA;kBACepC,Y","file":"filebaseStorage.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers/utilities","sourcesContent":["/* eslint-disable no-console */\nimport * as admin from 'firebase-admin';\n\nconst env = process.env.NODE_ENV;\n\nconst projectId = process.env.PROJECT_ID;\nconst key = process.env.KEY.replace(/\\\\n/g, '\\n');\nlet bucketName;\n\nif (env === 'production') {\n  bucketName = process.env.PROC_BUCKET;\n} else {\n  bucketName = process.env.DEV_BUCKET;\n}\n\n// Set the configuration for your app\nadmin.initializeApp({\n  credential: admin.credential.cert({\n    project_id: projectId,\n    private_key: `-----BEGIN PRIVATE KEY-----\\n${key}\\n-----END PRIVATE KEY-----\\n`,\n    client_email: `firebase-adminsdk-er0j4@${projectId}.iam.gserviceaccount.com`\n  }),\n  storageBucket: bucketName\n});\n\nconst storage = admin.storage();\n\nconst bucket = storage.bucket();\n\nconst imageStorage = {\n  /**\n  * Upload the image file to Google storage\n  * @param {file} file object that will be uploaded to Google storage\n  * @param {folder} folder file folder name\n  * @returns {fileName} The file name uploaded.\n  */\n  uploadImageToStorage(file, folder) {\n    const prom = new Promise((resolve, reject) => {\n      if (!file) {\n        reject(new Error('No image file'));\n      }\n      const newFileName = `${folder}/${file.originalname}_${Date.now()}`;\n\n      const fileUpload = bucket.file(newFileName);\n\n      const blobStream = fileUpload.createWriteStream({\n        metadata: {\n          contentType: file.mimetype\n        }\n      });\n\n      blobStream.on('error', (error) => {\n        reject(error);\n        // reject(new Error('Something is wrong! Unable to upload at the moment.'));\n      });\n\n      blobStream.on('finish', () => {\n        const fileName = fileUpload.name;\n\n        // Make file public\n        bucket.file(fileName).makePublic((/* err, apiResponse */) => {});\n\n        resolve(fileName);\n      });\n\n      blobStream.end(file.buffer);\n    });\n\n    return prom;\n  },\n  getImageFromStorage(fileName) {\n    const file = bucket.file(fileName);\n\n    return file.get().then((data) => {\n      const apiResponse = data[1];\n      return apiResponse;\n    });\n  },\n  deleteImageFromStorage(fileName) {\n    const file = bucket.file(fileName);\n\n    file.delete().then(() => {\n      console.log(`${fileName} deleted.`);\n    })\n      .catch((err) => {\n        console.error('ERROR:', err);\n      });\n  }\n\n};\n\n\n/* eslint-enable no-console */\nexport default imageStorage;\n"]}