{"version":3,"sources":["users.js"],"names":["models","User","imageStorage","uploadImageToStorage","errorHandler","createHandlerError","incompleteFieldHandlerError","fileTypeHandleError","fileSizeHandleError","usernameHandlerError","emailHandlerError","phoneHandlerError","upload","storage","multer","memoryStorage","fileSizeLimit","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","usersController","single","create","req","res","body","username","password","email","gender","filePath","hashedPassword","bcrypt","hashSync","file","fileName","findAll","then","results","users","rows","userCount","user","phone","length","fileError","fileHandleError","console","error","status","send","data","title","firstname","lastname","country","userImage","result","auth","catch","check","findOne","where","message","passIsEqual","compareSync","e"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport models from '../models';\nimport app from '../../app';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport imageStorage from './utilities/filebaseStorage';\n\nconst [User] = [models.User];\nconst [uploadImageToStorage] = [imageStorage.uploadImageToStorage];\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [fileTypeHandleError] = [errorHandler.fileTypeHandleError]; // file type handleError\nconst [fileSizeHandleError] = [errorHandler.fileSizeHandleError]; // file size handleError\nconst [usernameHandlerError] = [errorHandler.usernameHandlerError]; // username handleError\nconst [emailHandlerError] = [errorHandler.emailHandlerError]; // email handleError\nconst [phoneHandlerError] = [errorHandler.phoneHandlerError]; // phone handleError\n\nconst upload = multer({\n  storage: multer.memoryStorage()\n  // dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  create(req, res) { // create a user\n\n    /* Required feilds */\n    if (!req.body.username || !req.body.password || !req.body.email || !req.body.gender) {\n      return incompleteFieldHandlerError(res, filePath);\n    }\n    // Auto-gen a salt and hash\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n\n    let file = req.file;\n    let fileName;\n\n    /* Search to see if username, email and phone exist before creation\n    to avoid skipping of id on unique constraint */\n    User.findAll().then(async (results) => {\n      const users = results.rows;\n      let userCount = 0;\n      for (const user of users) {\n        if (req.body.username === user.username) return usernameHandlerError(res);\n        if (req.body.email === user.email) return emailHandlerError(res);\n        if (req.body.phone === user.phone) return phoneHandlerError(res);\n        userCount += 1;\n      }\n      if (userCount === users.length) { // Create user after checking if it exist\n\n        if (file) {\n          // implementing the file filter method\n          const fileError = fileFilterMethod(req, fileSizeLimit);\n          if(fileError) return fileHandleError(res, fileError);\n          try {\n            fileName = await uploadImageToStorage(file,'userImages');\n          } catch(error) {\n            console.error(error);\n            return res.status(400).send(error);\n          }\n        }\n\n        // Grab data from http request\n        const data = {\n          title: req.body.title,\n          firstname: req.body.firstname,\n          lastname: req.body.lastname,\n          username: req.body.username,\n          password: hashedPassword,\n          email: req.body.email,\n          gender: req.body.gender,\n          country: req.body.country,\n          phone: req.body.phone,\n          userImage: fileName\n        };\n\n        User.create(data) // pass data to our model\n          .then((result) => {\n            const user = result.rows[0];\n            const token = tokenMethod(user.id); // Generate token\n            if (token) return res.status(201).send({ user, auth: true, token });\n          }).catch(error => createHandlerError(error, res, fileName));\n      }\n    }).catch(error => createHandlerError(error, res));\n  },\n  check(req, res) { // login with username and password\n    // pass data to our model\n    User.findOne({ where: { username: req.body.username } })\n      .then((result) => {\n        const user = result.rows[0];\n        // Returning error message for user not found\n        if (!user) return res.status(400).send({ message: 'Invalid username/password' });\n        // Compare hash from your password DB.\n        const passIsEqual = bcrypt.compareSync(req.body.password, user.password);\n        if (!passIsEqual) return res.status(404).send({ message: 'Invalid username/password' });\n        const token = tokenMethod(user.id); // Generate token\n        // Returning user detais\n        if (token) return res.status(200).send({ user, auth: true, token });\n      }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default usersController;\n"]}