{"version":3,"sources":["questions.js"],"names":["models","Question","Answer","imageStorage","uploadImageToStorage","deleteImageFromStorage","getImageFromStorage","errorHandler","createHandlerError","incompleteFieldHandlerError","fileHandleError","questionHandlerError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","parametersHandlerError","upload","storage","multer","memoryStorage","fileSizeLimit","questionsController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","body","title","question","tags","file","fileName","findAll","then","results","questions","rows","questionCount","length","fileError","console","error","status","send","data","userId","questionImage","result","catch","name","constraint","list","auth","selectionType","query","where","order","retrieve","message","findById","params","questionId","findOne","questionid","id","answer","userid","user","answers","questionimage","imageResponse","mediaLink","answerimage","ansImageResponse","destroy"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;2cAPA;AACA;;;WAQmB,CAACA,iBAAOC,QAAR,C;IAAZA,Q;YACU,CAACD,iBAAOE,MAAR,C;IAAVA,M;YACwB,CAACC,0BAAaC,oBAAd,C;IAAxBA,oB;YAC0B,CAACD,0BAAaE,sBAAd,C;IAA1BA,sB;YACuB,CAACF,0BAAaG,mBAAd,C;IAAvBA,mB;YACsB,CAACC,uBAAaC,kBAAd,C;IAAtBA,kB,aAAyD;AAChE;;YACsC,CAACD,uBAAaE,2BAAd,C;IAA/BA,2B;YACmB,CAACF,uBAAaG,eAAd,C;IAAnBA,e,aAAmD;;YAC3B,CAACH,uBAAaI,oBAAd,C;IAAxBA,oB,aAA6D;AACpE;;aACsC,CAACJ,uBAAaK,2BAAd,C;IAA/BA,2B;aACuB,CAACL,uBAAaM,mBAAd,C;IAAvBA,mB,cAA2D;AAClE;;aACiC,CAACN,uBAAaO,sBAAd,C;IAA1BA,sB;AACP;;aACiC,CAACP,uBAAaQ,sBAAd,C;IAA1BA,sB;;;AAEP,IAAMC,SAAS,sBAAO;AACpBC,WAASC,iBAAOC,aAAP;AADW,CAAP,CAAf;;AAIA,IAAMC,gBAAgB,OAAO,IAAP,GAAc,CAApC;;AAEA,IAAMC,sBAAsB;AAC1BL,UAAQA,OAAOM,MAAP,CAAc,eAAd,CADkB,EACc;AACxCC,QAF0B,kBAEnBC,GAFmB,EAEdC,GAFc,EAET;AAAA;;AAAE;AACjB,QAAIC,kBAAJ;AACA,QAAMC,aAAa,2BAAWH,GAAX,CAAnB;AACA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA,QAAIC,oBAAJ,EAA0B,OAAOf,oBAAoBY,GAApB,CAAP;AAC1B,QAAII,eAAJ,EAAqB,OAAOf,uBAAuBW,GAAvB,CAAP;AACrB,QAAIK,mBAAJ,EAAyBJ,YAAYI,mBAAZ;;AAEzB;AACA,QAAI,CAACN,IAAIO,IAAJ,CAASC,KAAV,IAAmB,CAACR,IAAIO,IAAJ,CAASE,QAA7B,IAAyC,CAACT,IAAIO,IAAJ,CAASG,IAAvD,EAA6D;AAC3D,aAAOzB,4BAA4BgB,GAA5B,CAAP;AACD;;AAED,QAAIU,OAAOX,IAAIW,IAAf;AACA,QAAIC,WAAW,EAAf;AACA;;AAEAnC,aAASoC,OAAT,GAAmBC,IAAnB;AAAA,2EAAwB,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBC,yBADgB,GACJD,QAAQE,IADJ;AACcC,6BADd,GAC8B,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,4BAECF,SAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEXP,wBAFW;;AAAA,sBAGhBT,IAAIO,IAAJ,CAASC,KAAT,KAAmBC,SAASD,KAHZ;AAAA;AAAA;AAAA;;AAAA,iDAG0BrB,qBAAqBc,GAArB,CAH1B;;AAAA;AAIpBiB,iCAAiB,CAAjB;;AAJoB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,sBAMlBA,kBAAkBF,UAAUG,MANV;AAAA;AAAA;AAAA;;AAAA,qBAOhBR,IAPgB;AAAA;AAAA;AAAA;;AAQlB;AACMS,yBATY,GASA,0BAAiBpB,GAAjB,EAAsBJ,aAAtB,CATA;;AAAA,qBAUfwB,SAVe;AAAA;AAAA;AAAA;;AAAA,iDAUGlC,gBAAgBe,GAAhB,EAAqBmB,SAArB,CAVH;;AAAA;AAAA;AAAA;AAAA,uBAYCxC,qBAAqB+B,IAArB,EAA0B,gBAA1B,CAZD;;AAAA;AAYhBC,wBAZgB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAchBS,wBAAQC,KAAR;AAdgB,iDAeTrB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,aAfS;;AAAA;;AAmBhB;AACMC,oBApBU,GAoBH;AACXjB,yBAAOR,IAAIO,IAAJ,CAASC,KADL;AAEXC,4BAAUT,IAAIO,IAAJ,CAASE,QAFR;AAGXiB,0BAAQxB,SAHG;AAIXQ,wBAAMV,IAAIO,IAAJ,CAASG,IAJJ;AAKXiB,iCAAef;AALJ,iBApBG;;AA2BlBnC,yBAASsB,MAAT,CAAgB0B,IAAhB,EAAsB;AAAtB,iBACGX,IADH,CACQ,UAACc,MAAD,EAAY;AAChB,sBAAMnB,WAAWmB,OAAOX,IAAP,CAAY,CAAZ,CAAjB;AACA,yBAAOhB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBf,QAArB,CAAP;AACD,iBAJH,EAIKoB,KAJL,CAIW,UAACP,KAAD,EAAW;AAClB,sBAAIA,MAAMQ,IAAN,KAAe,OAAf,IAA0BR,MAAMS,UAAN,KAAqB,uBAAnD,EAA4E;AAC1E,2BAAO3C,4BAA4Ba,GAA5B,EAAiCW,QAAjC,CAAP;AACD;AACD,yBAAO5B,mBAAmBsC,KAAnB,EAA0BrB,GAA1B,EAA+BW,QAA/B,CAAP;AACD,iBATH;;AA3BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAxB;;AAAA;AAAA;AAAA;AAAA,SAsCGiB,KAtCH,CAsCS;AAAA,aAAS7C,mBAAmBsC,KAAnB,EAA0BrB,GAA1B,CAAT;AAAA,KAtCT;AAwCD,GA9DyB;AA+D1B+B,MA/D0B,gBA+DrBhC,GA/DqB,EA+DhBC,GA/DgB,EA+DX;AACb,QAAIC,kBAAJ,CADa,CACE;AACf,QAAI+B,OAAO,KAAX,CAFa,CAEK;AAClB,QAAM9B,aAAa,2BAAWH,GAAX,CAAnB;;AAEA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA;AACA,QAAIC,oBAAJ,EAA0B;AACxB6B,aAAO,KAAP;AACD,KAFD,MAEO,IAAI5B,eAAJ,EAAqB4B,OAAO,KAAP,CAArB,KACFA,OAAO,IAAP;;AAEL,QAAI3B,mBAAJ,EAAyBJ,YAAYI,mBAAZ;;AAEzB,QAAI4B,sBAAJ;AACA,QAAIlC,IAAImC,KAAJ,CAAUT,MAAd,EAAsB;AACpBQ,sBAAgBzD,SACboC,OADa,CACL,EAAEuB,OAAO,EAAEV,QAAQxB,SAAV,EAAT,EAAgCmC,OAAO,CAAC,WAAD,EAAc,MAAd,CAAvC,EADK,CAAhB;AAED,KAHD,MAGO;AACLH,sBAAgBzD,SAASoC,OAAT,CAAiB,EAAEwB,OAAO,CAAC,WAAD,EAAc,MAAd,CAAT,EAAjB,CAAhB;AACD;AACDH,kBAAcpB,IAAd,CAAmB,UAACC,OAAD,EAAa;AAC9B,UAAMC,YAAYD,QAAQE,IAA1B;AACA,aAAOhB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAER,oBAAF,EAAaiB,UAAb,EAArB,CAAP;AACD,KAHD,EAGGJ,KAHH,CAGS;AAAA,aAAS5B,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB,CAAT;AAAA,KAHT;AAID,GA3FyB;AA4F1BgB,UA5F0B,oBA4FjBtC,GA5FiB,EA4FZC,GA5FY,EA4FP;AAAA;;AACjB,QAAIC,kBAAJ,CADiB,CACF;AACf,QAAI+B,OAAO,KAAX,CAFiB,CAEC;AAClB,QAAM9B,aAAa,2BAAWH,GAAX,CAAnB;;AAEA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA;AACA,QAAIC,oBAAJ,EAA0B;AACxB6B,aAAO,KAAP;AACD,KAFD,MAEO,IAAI5B,eAAJ,EAAqB4B,OAAO,KAAP,CAArB,KACFA,OAAO,IAAP;;AAEL,QAAI3B,mBAAJ,EAAyBJ,YAAYI,mBAAZ;;AAEzB,QAAIf,uBAAuBS,GAAvB,CAAJ,EAAiC;AAC/B,aAAOC,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,SAAS,oBAAX,EAArB,CAAP;AACD;;AAED9D,aAAS+D,QAAT,CAAkBxC,IAAIyC,MAAJ,CAAWC,UAA7B,EAAyC5B,IAAzC,CAA8C,UAACc,MAAD,EAAY;AACxD,UAAMnB,WAAWmB,OAAOX,IAAP,CAAY,CAAZ,CAAjB;AACA,UAAI,CAACR,QAAL,EAAe,OAAOR,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,SAAS,oBAAX,EAArB,CAAP;AACf;AACA7D,aAAOiE,OAAP,CAAe,EAAEP,OAAO,EAAEQ,YAAYnC,SAASoC,EAAvB,EAAT,EAAsCR,OAAO,CAAC,WAAD,EAAc,KAAd,CAA7C,EAAf,EAAoFvB,IAApF;AAAA,6EAAyF,kBAAMgC,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvF,sBAAI5C,cAAcO,SAASsC,MAA3B,EAAmCtC,SAASuC,IAAT,GAAgB,IAAhB,CAAnC,KACKvC,SAASuC,IAAT,GAAgB,KAAhB;AACLvC,2BAASwB,IAAT,GAAgBA,IAAhB;AACAxB,2BAASwC,OAAT,GAAmBH,OAAO7B,IAA1B;;AAJuF,uBAKpFR,SAASyC,aAL2E;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAOvDpE,oBAAoB2B,SAASyC,aAA7B,CAPuD;;AAAA;AAO7EC,+BAP6E;;AAQnF1C,2BAASyC,aAAT,GAAyBC,cAAcC,SAAvC;AARmF;AAAA;;AAAA;AAAA;AAAA;;AAUnF/B,0BAAQC,KAAR;AAVmF,oDAW5ErB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,cAX4E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAatEf,SAASwC,OAb6D;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAahFH,wBAbgF;;AAAA,uBAchFA,OAAOO,WAdyE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAgBhDvE,oBAAoBgE,OAAOO,WAA3B,CAhBgD;;AAAA;AAgBzEC,kCAhByE;;AAiB/ER,yBAAOO,WAAP,GAAqBC,iBAAiBF,SAAtC;AAjB+E;AAAA;;AAAA;AAAA;AAAA;;AAmB/E/B,0BAAQC,KAAR;AAnB+E,oDAoBxErB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,cApBwE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,oDA0BhFvB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBf,QAArB,CA1BgF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAzF;;AAAA;AAAA;AAAA;AAAA,WA4BGoB,KA5BH,CA4BS;AAAA,eAAS5B,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB,CAAT;AAAA,OA5BT;AA6BD,KAjCD,EAiCGO,KAjCH,CAiCS;AAAA,aAAS5B,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB,CAAT;AAAA,KAjCT;AAkCD,GAnJyB;AAoJ1BiC,SApJ0B,mBAoJlBvD,GApJkB,EAoJbC,GApJa,EAoJR;AAAA;;AAChB,QAAIC,kBAAJ;AACA,QAAMC,aAAa,2BAAWH,GAAX,CAAnB;AACA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA,QAAIC,oBAAJ,EAA0B,OAAOf,oBAAoBY,GAApB,CAAP;AAC1B,QAAII,eAAJ,EAAqB,OAAOf,uBAAuBW,GAAvB,CAAP;AACrB,QAAIK,mBAAJ,EAAyBJ,YAAYI,mBAAZ;;AAEzB,QAAIf,uBAAuBS,GAAvB,EAA4BC,GAA5B,CAAJ,EAAsC;AACpC,aAAOA,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,SAAS,oBAAX,EAArB,CAAP;AACD;;AAED9D,aAAS+D,QAAT,CAAkBxC,IAAIyC,MAAJ,CAAWC,UAA7B,EAAyC5B,IAAzC,CAA8C,UAACc,MAAD,EAAY;AACxD,UAAMnB,WAAWmB,OAAOX,IAAP,CAAY,CAAZ,CAAjB;AACA,UAAI,CAACR,QAAL,EAAe,OAAOR,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,SAAS,oBAAX,EAArB,CAAP;AACf,UAAIrC,cAAcO,SAASsC,MAA3B,EAAmC;AACjC,eAAO9C,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,MAAM,KAAR,EAAeM,SAAS,kBAAxB,EAArB,CAAP;AACD;AACD9D,eAAS8E,OAAT,CAAiB,EAAEnB,OAAO,EAAES,IAAIpC,SAASoC,EAAf,EAAT,EAAjB,EAAiD/B,IAAjD,yDAAsD;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChDL,SAASyC,aADuC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAG1CrE,uBAAuB4B,SAASyC,aAAhC,CAH0C;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKhD7B,wBAAQC,KAAR;AALgD,kDAMzCrB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,cANyC;;AAAA;AAAA,kDAS7CvB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAT6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAtD;AAWD,KAjBD,EAiBGK,KAjBH,CAiBS;AAAA,aAAS5B,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB,CAAT;AAAA,KAjBT;AAkBD;AArLyB,CAA5B;;kBAwLezB,mB","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport imageStorage from './utilities/filebaseStorage';\n\nconst [Question] = [models.Question];\nconst [Answer] = [models.Answer];\nconst [uploadImageToStorage] = [imageStorage.uploadImageToStorage];\nconst [deleteImageFromStorage] = [imageStorage.deleteImageFromStorage];\nconst [getImageFromStorage] = [imageStorage.getImageFromStorage];\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [fileHandleError] = [errorHandler.fileHandleError]; // file handleError\nconst [questionHandlerError] = [errorHandler.questionHandlerError]; // question handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n// parameters handlerError\nconst [parametersHandlerError] = [errorHandler.parametersHandlerError];\n\nconst upload = multer({\n  storage: multer.memoryStorage()\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a question\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) {\n      return incompleteFieldHandlerError(res);\n    }\n\n    let file = req.file;\n    let fileName = '';\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then(async (results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (req.body.title === question.title) return questionHandlerError(res);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        if (file) {\n          // implementing the file filter method\n          const fileError = fileFilterMethod(req, fileSizeLimit);\n          if(fileError) return fileHandleError(res, fileError);\n          try {\n            fileName = await uploadImageToStorage(file,'questionImages');\n          } catch(error) {\n            console.error(error);\n            return res.status(400).send(error);\n          }\n        }\n\n            // Grab data from http request\n            const data = {\n              title: req.body.title,\n              question: req.body.question,\n              userId: decodedID,\n              tags: req.body.tags,\n              questionImage: fileName,\n            };\n          Question.create(data) // pass data to our model\n            .then((result) => {\n              const question = result.rows[0];\n              return res.status(201).send(question);\n            }).catch((error) => {\n              if (error.name === 'error' && error.constraint === 'questions_userid_fkey') {\n                return userNotPrestentHandlerError(res, fileName);\n              }\n              return createHandlerError(error, res, fileName);\n            });\n      }\n    }).catch(error => createHandlerError(error, res));\n\n  },\n  list(req, res) {\n    let decodedID; // Identity gotten from jwt\n    let auth = false; // Session authentication\n    const authValues = authMethod(req);\n\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    // Check if token is still valid\n    if (noTokenProviderError) {\n      auth = false;\n    } else if (failedAuthError) auth = false;\n    else auth = true;\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    let selectionType;\n    if (req.query.userId) {\n      selectionType = Question\n        .findAll({ where: { userId: decodedID }, order: ['createdat', 'DESC'] });\n    } else {\n      selectionType = Question.findAll({ order: ['createdat', 'DESC'] });\n    }\n    selectionType.then((results) => {\n      const questions = results.rows;\n      return res.status(200).send({ questions, auth });\n    }).catch(error => res.status(400).send(error));\n  },\n  retrieve(req, res) {\n    let decodedID; // Identity gotten from jwt\n    let auth = false; // Session authentication\n    const authValues = authMethod(req);\n\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    // Check if token is still valid\n    if (noTokenProviderError) {\n      auth = false;\n    } else if (failedAuthError) auth = false;\n    else auth = true;\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    if (parametersHandlerError(req)) {\n      return res.status(400).send({ message: 'question not found' });\n    }\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      // Getting answers to the question\n      Answer.findOne({ where: { questionid: question.id }, order: ['createdat', 'ASC'] }).then(async(answer) => {\n        if (decodedID === question.userid) question.user = true;\n        else question.user = false;\n        question.auth = auth;\n        question.answers = answer.rows;\n        if(question.questionimage) {\n          try {\n            const imageResponse = await getImageFromStorage(question.questionimage);\n            question.questionimage = imageResponse.mediaLink;\n          } catch(error){\n            console.error(error);\n            return res.status(400).send(error);\n          }\n          for (answer of question.answers) {\n            if(answer.answerimage) {\n              try {\n                const ansImageResponse = await getImageFromStorage(answer.answerimage);\n                answer.answerimage = ansImageResponse.mediaLink;\n              } catch(error){\n                console.error(error);\n                return res.status(400).send(error);\n              }\n            }\n          }\n\n        }\n        return res.status(200).send(question);\n      })\n        .catch(error => res.status(400).send(error));\n    }).catch(error => res.status(400).send(error));\n  },\n  destroy(req, res) {\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    if (parametersHandlerError(req, res)) {\n      return res.status(400).send({ message: 'question not found' });\n    }\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      if (decodedID !== question.userid) {\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n      }\n      Question.destroy({ where: { id: question.id } }).then(async () => {\n        if (question.questionimage) {\n          try{\n            await deleteImageFromStorage(question.questionimage);\n          } catch(error){\n            console.error(error);\n            return res.status(400).send(error);\n          }\n        }\n        return res.status(204).send();\n      });\n    }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default questionsController;\n"]}