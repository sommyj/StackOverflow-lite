{"version":3,"sources":["questions.js"],"names":["models","Question","errorHandler","createHandlerError","incompleteFieldHandlerError","fileTypeHandleError","fileSizeHandleError","questionHandlerError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","fsHelper","deleteFile","upload","dest","fileSizeLimit","questionsController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","fileSizeError","fileTypeError","filePath","body","title","question","tags","data","userId","questionImage","findAll","then","results","questions","rows","questionCount","length","result","status","send","catch","error","name","constraint","list","retrieve","findById","params","questionId","message","destroy","userid","auth","where","id","questionimage"],"mappings":";;;;;;ypBAAA;AACA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;WAEmB,CAACA,iBAAOC,QAAR,C;IAAZA,Q;YAEsB,CAACC,uBAAaC,kBAAd,C;IAAtBA,kB,aAAyD;AAChE;;YACsC,CAACD,uBAAaE,2BAAd,C;IAA/BA,2B;YACuB,CAACF,uBAAaG,mBAAd,C;IAAvBA,mB,aAA2D;;YACpC,CAACH,uBAAaI,mBAAd,C;IAAvBA,mB,aAA2D;;YACnC,CAACJ,uBAAaK,oBAAd,C;IAAxBA,oB,aAA6D;AACpE;;YACsC,CAACL,uBAAaM,2BAAd,C;IAA/BA,2B;YACuB,CAACN,uBAAaO,mBAAd,C;IAAvBA,mB,aAA2D;AAClE;;YACiC,CAACP,uBAAaQ,sBAAd,C;IAA1BA,sB;aAEc,CAACC,qBAASC,UAAV,C;IAAdA,U,cAAoC;;AAE3C,IAAMC,SAAS,sBAAO;AACpBC,QAAM;AADc,CAAP,CAAf;;AAIA,IAAMC,gBAAgB,OAAO,IAAP,GAAc,CAApC;;AAEA,IAAMC,sBAAsB;AAC1BH,UAAQA,OAAOI,MAAP,CAAc,eAAd,CADkB,EACc;AACxCC,QAF0B,kBAEnBC,GAFmB,EAEdC,GAFc,EAET;AAAE;AACjB,QAAIC,kBAAJ;AACA,QAAMC,aAAa,2BAAWH,GAAX,CAAnB;AACA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA,QAAIC,oBAAJ,EAA0B,OAAOd,oBAAoBW,GAApB,CAAP;AAC1B,QAAII,eAAJ,EAAqB,OAAOd,uBAAuBU,GAAvB,CAAP;AACrB,QAAIK,mBAAJ,EAAyBJ,YAAYI,mBAAZ;AACzB;;AAVe,4BAWkC,0BAAiBN,GAAjB,EAAsBJ,aAAtB,EAAqC,kBAArC,CAXlC;AAAA;AAAA,QAWRW,aAXQ;AAAA,QAWOC,aAXP;AAAA,QAWsBC,QAXtB;;AAYf,QAAIF,aAAJ,EAAmB,OAAOpB,oBAAoBc,GAApB,CAAP;AACnB,QAAIO,aAAJ,EAAmB,OAAOtB,oBAAoBe,GAApB,CAAP;AACnB;AACA,QAAI,CAACD,IAAIU,IAAJ,CAASC,KAAV,IAAmB,CAACX,IAAIU,IAAJ,CAASE,QAA7B,IAAyC,CAACZ,IAAIU,IAAJ,CAASG,IAAvD,EAA6D;AAC3D,aAAO5B,4BAA4BgB,GAA5B,EAAiCQ,QAAjC,CAAP;AACD;AACD;AACA,QAAMK,OAAO;AACXH,aAAOX,IAAIU,IAAJ,CAASC,KADL;AAEXC,gBAAUZ,IAAIU,IAAJ,CAASE,QAFR;AAGXG,cAAQb,SAHG;AAIXW,YAAMb,IAAIU,IAAJ,CAASG,IAJJ;AAKXG,qBAAeP;AALJ,KAAb;AAOA;;AAEA3B,aAASmC,OAAT,GAAmBC,IAAnB,CAAwB,UAACC,OAAD,EAAa;AACnC,UAAMC,YAAYD,QAAQE,IAA1B,CAAgC,IAAIC,gBAAgB,CAApB;AADG;AAAA;AAAA;;AAAA;AAEnC,6BAAuBF,SAAvB,8HAAkC;AAAA,cAAvBR,QAAuB;;AAChC,cAAIE,KAAKH,KAAL,KAAeC,SAASD,KAA5B,EAAmC,OAAOvB,qBAAqBa,GAArB,EAA0BQ,QAA1B,CAAP;AACnCa,2BAAiB,CAAjB;AACD;AALkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMnC,UAAIA,kBAAkBF,UAAUG,MAAhC,EAAwC;AAAE;AACxCzC,iBAASiB,MAAT,CAAgBe,IAAhB,EAAsB;AAAtB,SACGI,IADH,CACQ,UAACM,MAAD,EAAY;AAChB,cAAMZ,WAAWY,OAAOH,IAAP,CAAY,CAAZ,CAAjB;AACA,iBAAOpB,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,QAArB,CAAP;AACD,SAJH,EAIKe,KAJL,CAIW,UAACC,KAAD,EAAW;AAClB,cAAIA,MAAMC,IAAN,KAAe,OAAf,IAA0BD,MAAME,UAAN,KAAqB,uBAAnD,EAA4E;AAC1E,mBAAOzC,4BAA4BY,GAA5B,EAAiCQ,QAAjC,CAAP;AACD;AACD,iBAAOzB,mBAAmB4C,KAAnB,EAA0B3B,GAA1B,EAA+BQ,QAA/B,CAAP;AACD,SATH;AAUD;AACF,KAlBD,EAkBGkB,KAlBH,CAkBS;AAAA,aAAS3C,mBAAmB4C,KAAnB,EAA0B3B,GAA1B,EAA+BQ,QAA/B,CAAT;AAAA,KAlBT;AAmBD,GAjDyB;AAkD1BsB,MAlD0B,gBAkDrB/B,GAlDqB,EAkDhBC,GAlDgB,EAkDX;AACbnB,aAASmC,OAAT,GAAmBC,IAAnB,CAAwB,UAACC,OAAD,EAAa;AACnC,UAAMC,YAAYD,QAAQE,IAA1B;AACA,aAAOpB,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,SAArB,CAAP;AACD,KAHD,EAGGO,KAHH,CAGS;AAAA,aAAS1B,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,KAArB,CAAT;AAAA,KAHT;AAID,GAvDyB;AAwD1BI,UAxD0B,oBAwDjBhC,GAxDiB,EAwDZC,GAxDY,EAwDP;AACjBnB,aAASmD,QAAT,CAAkBjC,IAAIkC,MAAJ,CAAWC,UAA7B,EAAyCjB,IAAzC,CAA8C,UAACM,MAAD,EAAY;AACxD,UAAMZ,WAAWY,OAAOH,IAAP,CAAY,CAAZ,CAAjB;AACA,UAAI,CAACT,QAAL,EAAe,OAAOX,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEU,SAAS,oBAAX,EAArB,CAAP;AACf,aAAOnC,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,QAArB,CAAP;AACD,KAJD,EAIGe,KAJH,CAIS;AAAA,aAAS1B,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,KAArB,CAAT;AAAA,KAJT;AAKD,GA9DyB;AA+D1BS,SA/D0B,mBA+DlBrC,GA/DkB,EA+DbC,GA/Da,EA+DR;AAChB,QAAIC,kBAAJ;AACA,QAAMC,aAAa,2BAAWH,GAAX,CAAnB;AACA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA,QAAIC,oBAAJ,EAA0B,OAAOd,oBAAoBW,GAApB,CAAP;AAC1B,QAAII,eAAJ,EAAqB,OAAOd,uBAAuBU,GAAvB,CAAP;AACrB,QAAIK,mBAAJ,EAAyBJ,YAAYI,mBAAZ;;AAEzBxB,aAASmD,QAAT,CAAkBjC,IAAIkC,MAAJ,CAAWC,UAA7B,EAAyCjB,IAAzC,CAA8C,UAACM,MAAD,EAAY;AACxD,UAAMZ,WAAWY,OAAOH,IAAP,CAAY,CAAZ,CAAjB;AACA,UAAI,CAACT,QAAL,EAAe,OAAOX,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEU,SAAS,oBAAX,EAArB,CAAP;AACf,UAAIlC,cAAcU,SAAS0B,MAA3B,EAAmC;AACjC,eAAOrC,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEa,MAAM,KAAR,EAAeH,SAAS,kBAAxB,EAArB,CAAP;AACD;AACDtD,eAASuD,OAAT,CAAiB,EAACG,OAAM,EAACC,IAAI7B,SAAS6B,EAAd,EAAP,EAAjB,EAA4CvB,IAA5C,CAAiD,YAAM;AACrD,YAAIN,SAAS8B,aAAb,EAA4B;AACtBjD,4BAAgBmB,SAAS8B,aAAzB;AACD;AACL,eAAOzC,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACD,OALD;AAMD,KAZD,EAYGC,KAZH,CAYS;AAAA,aAAS1B,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,KAArB,CAAT;AAAA,KAZT;AAcD;AAxFyB,CAA5B;;kBA2Fe/B,mB","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport fsHelper from '../../utilities/fileSystem';\n\nconst [Question] = [models.Question];\n\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [fileTypeHandleError] = [errorHandler.fileTypeHandleError]; // file type handleError\nconst [fileSizeHandleError] = [errorHandler.fileSizeHandleError]; // file size handleError\nconst [questionHandlerError] = [errorHandler.questionHandlerError]; // question handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n\nconst [deleteFile] = [fsHelper.deleteFile];// Delete file helper method\n\nconst upload = multer({\n  dest: './questionsUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a user\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'questionsUploads');\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) {\n      return incompleteFieldHandlerError(res, filePath);\n    }\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      question: req.body.question,\n      userId: decodedID,\n      tags: req.body.tags,\n      questionImage: filePath,\n    };\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then((results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (data.title === question.title) return questionHandlerError(res, filePath);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        Question.create(data) // pass data to our model\n          .then((result) => {\n            const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((error) => {\n            if (error.name === 'error' && error.constraint === 'questions_userid_fkey') {\n              return userNotPrestentHandlerError(res, filePath);\n            }\n            return createHandlerError(error, res, filePath);\n          });\n      }\n    }).catch(error => createHandlerError(error, res, filePath));\n  },\n  list(req, res) {\n    Question.findAll().then((results) => {\n      const questions = results.rows;\n      return res.status(200).send(questions);\n    }).catch(error => res.status(400).send(error));\n  },\n  retrieve(req, res) {\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      return res.status(200).send(question);\n    }).catch(error => res.status(400).send(error));\n  },\n  destroy(req, res) {\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      if (decodedID !== question.userid) {\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n      }\n      Question.destroy({where:{id: question.id}}).then(() => {\n        if (question.questionimage) {\n              deleteFile(`./${question.questionimage}`);\n            }\n        return res.status(204).send();\n      })\n    }).catch(error => res.status(400).send(error));\n\n  },\n};\n\nexport default questionsController;\n"]}