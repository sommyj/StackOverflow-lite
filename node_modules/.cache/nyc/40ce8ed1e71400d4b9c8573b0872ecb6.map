{"version":3,"sources":["question.js"],"names":["Question","create","data","queryStatement","text","values","title","question","userId","tags","questionImage","findAll","name","where","order","key","Object","keys","findById","id","destroy","force"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,WAAW;AACfC,QADe,kBACRC,IADQ,EACF;AACX;AACA,QAAMC,iBAAiB;AACrBC,+HADqB;AAGrBC,cAAQ,CAACH,KAAKI,KAAN,EAAaJ,KAAKK,QAAlB,EAA4BL,KAAKM,MAAjC,EAAyCN,KAAKO,IAA9C,EAAoDP,KAAKQ,aAAzD;AAHa,KAAvB;;AAMA;AACA,WAAO,qBAAMP,cAAN,CAAP;AACD,GAXc;AAYfQ,SAZe,mBAYPT,IAZO,EAYD;AACZ,QAAIC,uBAAJ;AACA,QAAG,CAACD,IAAJ,EAAU;AACNC,uBAAiB,EAAE;AACjBS,cAAM,iBADS;AAEfR,cAAM;AAFS,OAAjB;AAIH,KALD,MAKO,IAAGF,KAAKW,KAAL,IAAcX,KAAKY,KAAtB,EAA6B;AAClC,UAAMC,MAAMC,OAAOC,IAAP,CAAYf,KAAKW,KAAjB,EAAwB,CAAxB,CAAZ;AACA;AACAV,uBAAiB;AACfS,cAAM,iBADS;AAEfR,iDAAuCW,GAAvC,gCACWb,KAAKY,KAAL,CAAW,CAAX,CADX,SAC4BZ,KAAKY,KAAL,CAAW,CAAX,CAHb;AAIfT,gBAAQ,CAACH,KAAKW,KAAL,CAAWE,GAAX,CAAD;AAJO,OAAjB;AAMD,KATM,MASA,IAAGb,KAAKY,KAAR,EAAe;AAClBX,uBAAiB,EAAE;AACjBS,cAAM,iBADS;AAEfR,oDAA0CF,KAAKY,KAAL,CAAW,CAAX,CAA1C,SAA2DZ,KAAKY,KAAL,CAAW,CAAX;AAF5C,OAAjB;AAIH,KALM,MAKA,IAAGZ,KAAKW,KAAR,EAAe;AAClB,UAAME,OAAMC,OAAOC,IAAP,CAAYf,KAAKW,KAAjB,EAAwB,CAAxB,CAAZ;AACAV,uBAAiB,EAAE;AACjBS,cAAM,iBADS;AAEfR,iDAAuCW,IAAvC,UAFe;AAGfV,gBAAQ,CAACH,KAAKW,KAAL,CAAWE,IAAX,CAAD;AAHO,OAAjB;AAKH;AACD;AACA,WAAO,qBAAMZ,cAAN,CAAP;AACD,GA3Cc;AA4Cfe,UA5Ce,oBA4CNC,EA5CM,EA4CF;AACX;AACA,QAAMhB,iBAAiB;AACrBS,YAAM,gBADe;AAErBR,YAAM,uCAFe;AAGrBC,cAAQ,CAACc,EAAD;AAHa,KAAvB;;AAMA;AACA,WAAO,qBAAMhB,cAAN,CAAP;AACD,GAtDc;AAuDfiB,SAvDe,mBAuDPlB,IAvDO,EAuDD;AACZ,QAAIC,uBAAJ;AACA,QAAI,CAACD,KAAKW,KAAL,CAAWM,EAAZ,IAAkBjB,KAAKmB,KAA3B,EAAkC;AAChClB,uBAAiB;AACfC,cAAM;AADS,OAAjB;AAGD,KAJD,MAIO;AACLD,uBAAiB;AACfC,cAAM,qCADS;AAEfC,gBAAQ,CAACH,KAAKW,KAAL,CAAWM,EAAZ;AAFO,OAAjB;AAID;;AAED;AACA,WAAO,qBAAMhB,cAAN,CAAP;AACD;AAtEc,CAAjB;;kBAyEeH,Q","file":"question.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/models","sourcesContent":["import query from './database/query';\n\nconst Question = {\n  create(data) {\n    // SQL Query > Insert Data\n    const queryStatement = {\n      text: `INSERT INTO questions(title, question, userId, tags, questionImage)\n      values($1, $2, $3, $4, $5) RETURNING *`,\n      values: [data.title, data.question, data.userId, data.tags, data.questionImage],\n    };\n\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  findAll(data) {\n    let queryStatement;\n    if(!data) {\n        queryStatement = { // select all questions\n          name: 'fetch-questions',\n          text: 'SELECT * FROM questions'\n        };\n    } else if(data.where && data.order) {\n      const key = Object.keys(data.where)[0];\n      // select all questions filter by the value of a key and  ordered by a field\n      queryStatement = {\n        name: 'fetch-questions',\n        text: `SELECT * FROM questions WHERE ${key} = $1\n        ORDER BY ${data.order[0]} ${data.order[1]}`,\n        values: [data.where[key]]\n      };\n    } else if(data.order) {\n        queryStatement = { // select all questions ordered by a field\n          name: 'fetch-questions',\n          text: `SELECT * FROM questions ORDER BY ${data.order[0]} ${data.order[1]}`\n        };\n    } else if(data.where) {\n        const key = Object.keys(data.where)[0];\n        queryStatement = { // select all questions filter by the value of a key\n          name: 'fetch-questions',\n          text: `SELECT * FROM questions WHERE ${key} = $1`,\n          values: [data.where[key]]\n        };\n    }\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  findById(id) {\n    // select a question\n    const queryStatement = {\n      name: 'fetch-question',\n      text: 'SELECT * FROM questions WHERE id = $1',\n      values: [id]\n    };\n\n    // require our query executor into our model\n    return query(queryStatement);\n  },\n  destroy(data) {\n    let queryStatement;\n    if (!data.where.id && data.force) {\n      queryStatement = {\n        text: 'DELETE FROM questions',\n      };\n    } else {\n      queryStatement = {\n        text: 'DELETE FROM questions WHERE id=($1)',\n        values: [data.where.id],\n      };\n    }\n\n    // require our query executor into our model\n    return query(queryStatement);\n  }\n};\n\nexport default Question;\n"]}