{"version":3,"sources":["answers.js"],"names":["models","Answer","Question","imageStorage","uploadImageToStorage","deleteImageFromStorage","errorHandler","createHandlerError","incompleteFieldHandlerError","notFoundHandlerError","fileHandleError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","upload","storage","multer","memoryStorage","fileSizeLimit","answersController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","body","response","fileName","file","fileError","status","send","data","userId","questionId","params","answerImage","then","result","answer","rows","catch","error","name","constraint","update","findById","result1","question","answerId","result2","userid","accepted","id","vote","answerimage","result3","previousImage","result4","auth","message"],"mappings":"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","file":"answers.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport imageStorage from './utilities/filebaseStorage';\n\nconst [Answer] = [models.Answer];\nconst [Question] = [models.Question];\nconst [uploadImageToStorage] = [imageStorage.uploadImageToStorage];\nconst [deleteImageFromStorage] = [imageStorage.deleteImageFromStorage];\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [notFoundHandlerError] = [errorHandler.notFoundHandlerError];\nconst [fileHandleError] = [errorHandler.fileHandleError]; // file handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n\nconst upload = multer({\n  storage: multer.memoryStorage()\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst answersController = {\n  upload: upload.single('answerImage'), // image upload\n  async create(req, res) { // create a answer\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    /* Required feilds */\n    if (!req.body.response) return incompleteFieldHandlerError(res);\n\n    let fileName = '';\n    const [file] = [req.file];\n    if (file) {\n      // implementing the file filter method\n      const fileError = fileFilterMethod(req, fileSizeLimit);\n      if (fileError) return fileHandleError(res, fileError);\n      try {\n        fileName = await uploadImageToStorage(file, 'answerImages');\n      } catch (error) {\n        return res.status(400).send(error);\n      }\n    }\n\n    const data = { // Grab data from http request\n      response: req.body.response,\n      userId: decodedID,\n      questionId: req.params.questionId,\n      answerImage: fileName,\n    };\n    Answer.create(data) // pass data to our model\n      .then((result) => {\n        const answer = result.rows[0];\n        return res.status(201).send(answer);\n      }).catch((error) => {\n        if (error.name === 'error' && error.constraint === 'answers_userid_fkey') {\n          return userNotPrestentHandlerError(res, fileName);\n        }\n        return createHandlerError(error, res, fileName);\n      });\n  },\n  update(req, res) { // update business\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    Question.findById(req.params.questionId).then((result1) => {\n      const question = result1.rows[0];\n      if (!question) return notFoundHandlerError('question', res);\n      Answer.findById(req.params.answerId).then(async (result2) => {\n        const answer = result2.rows[0];\n        if (!answer) return notFoundHandlerError('answer', res);\n        // For accepting an answer by the author of the question\n        if (decodedID === question.userid && req.body.accepted) {\n          return Answer.update({\n            id: answer.id,\n            response: answer.response,\n            accepted: req.body.accepted || answer.accepted,\n            vote: answer.vote,\n            answerImage: answer.answerimage,\n          }).then(result3 => res.status(200).send(result3.rows[0]))\n            .catch(error => createHandlerError(error, res));\n        }\n        // For updating an answer by the author of the answer\n        if (decodedID === answer.userid) {\n          let fileName = '';\n          const [file] = [req.file];\n          // holds the url of the image before update in other not to loose it\n          const previousImage = answer.answerimage;\n\n          if (file) {\n            // implementing the file filter method\n            const fileError = fileFilterMethod(req, fileSizeLimit);\n            if (fileError) return fileHandleError(res, fileError);\n            try {\n              fileName = await uploadImageToStorage(file, 'answerImages');\n            } catch (error) {\n              return res.status(400).send(error);\n            }\n          }\n\n          return Answer.update({\n            id: answer.id,\n            response: req.body.response || answer.response,\n            accepted: answer.accepted,\n            vote: answer.vote,\n            answerImage: fileName || answer.answerimage,\n          }).then(async (result4) => {\n            // if file and url is not empty delete img for updation\n            if (fileName) {\n              if (previousImage) { // deleteFile(`./${previousImage}`);\n                try {\n                  await deleteImageFromStorage(previousImage);\n                } catch (error) {\n                  return res.status(400).send(error);\n                }\n              }\n            }\n            return res.status(200).send(result4.rows[0]);\n          }).catch(error => createHandlerError(error, res, fileName));\n        }\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n      }).catch(error => createHandlerError(error, res));\n    }).catch(error => createHandlerError(error, res));\n  }\n};\n\nexport default answersController;\n"]}