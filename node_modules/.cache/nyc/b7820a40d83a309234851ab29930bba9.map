{"version":3,"sources":["questions-spec.js"],"names":["process","env","NODE_ENV","chai","should","use","chaiHttp","request","app","model","Question","deleteFile","targetPath","fs","unlink","err","describe","beforeEach","done","destroy","where","force","then","it","post","field","attach","end","res","have","status","body","be","a","property","eql"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,MAAvB;;AAEAC,eAAKC,MAAL;AACAD,eAAKE,GAAL,CAASC,kBAAT;AACA,IAAMC,UAAU,yBAAUC,aAAV,CAAhB;WACmB,CAACC,iBAAMC,QAAP,C;IAAZA,Q;;AAEP;;;;;;AAKA,IAAMC,aAAa,SAAbA,UAAa,CAACC,UAAD,EAAgB;AACjCC,uBAAGC,MAAH,CAAUF,UAAV,EAAsB,UAACG,GAAD,EAAS;AAC7B,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,GAFD;AAGD,CAJD;;AAMAC,SAAS,WAAT,EAAsB,YAAM;AAC1BC,aAAW,UAACC,IAAD,EAAU;AAAE;AACrBR,aAASS,OAAT,CAAiB,EAAEC,OAAO,EAAT,EAAaC,OAAO,IAApB,EAAjB,EAA6CC,IAA7C,CAAkD;AAAA,aAAMJ,MAAN;AAAA,KAAlD;AACD,GAFD;;AAIAF,WAAS,gBAAT,EAA2B,YAAM;AAC/BO,wEAAoE,UAACL,IAAD,EAAU;AAC5EX,cACGiB,IADH,CACQ,eADR,EAEGC,KAFH,CAES,OAFT,EAEkB,EAFlB,EAGGA,KAHH,CAGS,UAHT,EAGqB,EAHrB,EAIGA,KAJH,CAIS,QAJT,EAImB,EAJnB,EAKGA,KALH,CAKS,MALT,EAKiB,EALjB,EAMGA,KANH,CAMS,eANT,EAM0B,EAN1B,EAOGC,MAPH,CAOU,WAPV,EAOuB,gBAPvB,EAQGC,GARH,CAQO,UAACZ,GAAD,EAAMa,GAAN,EAAc;AACjBA,YAAIxB,MAAJ,CAAWyB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAF,YAAIG,IAAJ,CAAS3B,MAAT,CAAgB4B,EAAhB,CAAmBC,CAAnB,CAAqB,QAArB;AACAL,YAAIG,IAAJ,CAAS3B,MAAT,CAAgByB,IAAhB,CAAqBK,QAArB,CAA8B,SAA9B,EAAyCC,GAAzC,CAA6C,kBAA7C;AACAjB;AACD,OAbH;AAcD,KAfD;AAgBD,GAjBD;AAmBD,CAxBD","file":"questions-spec.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/test","sourcesContent":["import chai from 'chai';\nimport supertest from 'supertest';\nimport fs from 'file-system';\nimport path from 'path';\nimport chaiHttp from 'chai-http';\n\nimport app from '../app';\nimport model from '../server/models';\n\nprocess.env.NODE_ENV = 'test';\n\nchai.should();\nchai.use(chaiHttp);\nconst request = supertest(app);\nconst [Question] = [model.Question];\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\ndescribe('Questions', () => {\n  beforeEach((done) => { // Before each test we empty the database\n    Question.destroy({ where: {}, force: true }).then(() => done());\n  });\n\n  describe('/POST question', () => {\n    it(`it should not CREATE a question without title, question, tags`, (done) => {\n      request\n        .post('/v1/questions')\n        .field('title', '')\n        .field('question', '')\n        .field('userId', '')\n        .field('tags', '')\n        .field('questionImage', '')\n        .attach('userImage', './testFile.png')\n        .end((err, res) => {\n          res.should.have.status(206);\n          res.body.should.be.a('object');\n          res.body.should.have.property('message').eql('Incomplete field');\n          done();\n        });\n    });\n  });\n\n});\n"]}