{"version":3,"sources":["filebaseStorage.js"],"names":["admin","env","process","NODE_ENV","projectId","PROJECT_ID","key","KEY","replace","bucketName","PROC_BUCKET","DEV_BUCKET","initializeApp","credential","cert","project_id","private_key","client_email","storageBucket","storage","bucket","imageStorage","uploadImageToStorage","file","folder","prom","Promise","resolve","reject","newFileName","originalname","Date","now","fileUpload","blobStream","createWriteStream","metadata","contentType","mimetype","on","error","fileName","name","makePublic","err","apiResponse","end","buffer","getImageFromStorage","get","then","data","deleteImageFromStorage","delete","console","log","catch"],"mappings":";;;;;;AAAA;;IAAYA,K;;;;AACZ;;AAEA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAxB;;AAEA,IAAMC,YAAYF,QAAQD,GAAR,CAAYI,UAA9B;AACA,IAAMC,MAAMJ,QAAQD,GAAR,CAAYM,GAAZ,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgC,IAAhC,CAAZ;AACA,IAAIC,mBAAJ;;AAEA,IAAIR,QAAQ,YAAZ,EAA0B;AACxBQ,eAAaP,QAAQD,GAAR,CAAYS,WAAzB;AACD,CAFD,MAEO;AACLD,eAAaP,QAAQD,GAAR,CAAYU,UAAzB;AACD;;AAED;AACAX,MAAMY,aAAN,CAAoB;AAClBC,cAAYb,MAAMa,UAAN,CAAiBC,IAAjB,CAAsB;AAClCC,gBAAYX,SADsB;AAElCY,mDAA6CV,GAA7C,kCAFkC;AAGlCW,+CAAyCb,SAAzC,6BAHkC,EAAtB,CADM;AAKlBc,iBAAeT;AALG,CAApB;;AAQA,IAAMU,UAAUnB,MAAMmB,OAAN,EAAhB;;AAEA,IAAMC,SAASD,QAAQC,MAAR,EAAf;;AAEA,IAAMC,eAAe;AACnB;;;;AAIAC,sBALmB,gCAKEC,IALF,EAKQC,MALR,EAKgB;AACjC,QAAIC,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C,UAAG,CAACL,IAAJ,EAAU;AACRK,eAAO,eAAP;AACD;AACD,UAAIC,cAAiBL,MAAjB,SAA2BD,KAAKO,YAAhC,SAAgDC,KAAKC,GAAL,EAApD;;AAEA,UAAIC,aAAab,OAAOG,IAAP,CAAYM,WAAZ,CAAjB;;AAEA,UAAMK,aAAaD,WAAWE,iBAAX,CAA6B;AAC9CC,kBAAU;AACRC,uBAAad,KAAKe;AADV;AADoC,OAA7B,CAAnB;;AAMAJ,iBAAWK,EAAX,CAAc,OAAd,EAAuB,UAACC,KAAD,EAAW;AAChCZ,eAAO,qDAAP;AACD,OAFD;;AAIAM,iBAAWK,EAAX,CAAc,QAAd,EAAwB,YAAM;AAC5B,YAAME,WAAWR,WAAWS,IAA5B;;AAEA;AACAtB,eAAOG,IAAP,CAAYkB,QAAZ,EAAsBE,UAAtB,CAAiC,UAASC,GAAT,EAAcC,WAAd,EAA2B,CAAE,CAA9D;;AAEAlB,gBAAQc,QAAR;AACD,OAPD;;AASAP,iBAAWY,GAAX,CAAevB,KAAKwB,MAApB;AACD,KA5BU,CAAX;;AA8BA,WAAOtB,IAAP;AACD,GArCkB;AAsCnBuB,qBAtCmB,+BAsCCP,QAtCD,EAsCU;AAC3B,QAAMlB,OAAOH,OAAOG,IAAP,CAAYkB,QAAZ,CAAb;;AAEA,WAAOlB,KAAK0B,GAAL,GAAWC,IAAX,CAAgB,UAASC,IAAT,EAAe;AACpC,UAAMN,cAAcM,KAAK,CAAL,CAApB;AACA,aAAON,WAAP;AACD,KAHM,CAAP;AAID,GA7CkB;AA8CnBO,wBA9CmB,kCA8CIX,QA9CJ,EA8Cc;AAC/B,QAAMlB,OAAOH,OAAOG,IAAP,CAAYkB,QAAZ,CAAb;;AAEAlB,SAAK8B,MAAL,GAAcH,IAAd,CAAmB,YAAM;AACvBI,cAAQC,GAAR,CAAed,QAAf;AACD,KAFD,EAGCe,KAHD,CAGO,eAAO;AACZF,cAAQd,KAAR,CAAc,QAAd,EAAwBI,GAAxB;AACD,KALD;AAOD;AAxDkB,CAArB;;kBA4DevB,Y","file":"filebaseStorage.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers/utilities","sourcesContent":["import * as admin from 'firebase-admin';\n// import serviceAccount from './stackoverflow-file-firebase-adminsdk-er0j4-34e2e61292.json';\n\nconst env = process.env.NODE_ENV;\n\nconst projectId = process.env.PROJECT_ID;\nconst key = process.env.KEY.replace(/\\\\n/g, '\\n');\nlet bucketName;\n\nif (env === 'production') {\n  bucketName = process.env.PROC_BUCKET;\n} else {\n  bucketName = process.env.DEV_BUCKET;\n}\n\n// Set the configuration for your app\nadmin.initializeApp({\n  credential: admin.credential.cert({\n  project_id: projectId,\n  private_key: `-----BEGIN PRIVATE KEY-----\\n${key}\\n-----END PRIVATE KEY-----\\n`,\n  client_email: `firebase-adminsdk-er0j4@${projectId}.iam.gserviceaccount.com`}),\n  storageBucket: bucketName\n});\n\nconst storage = admin.storage();\n\nconst bucket = storage.bucket();\n\nconst imageStorage = {\n  /**\n  * Upload the image file to Google storage\n  * @param {file} file object that will be uploaded to Google storage\n  */\n  uploadImageToStorage(file, folder) {\n    let prom = new Promise((resolve, reject) => {\n      if(!file) {\n        reject('No image file');\n      }\n      let newFileName = `${folder}/${file.originalname}_${Date.now()}`;\n\n      let fileUpload = bucket.file(newFileName);\n\n      const blobStream = fileUpload.createWriteStream({\n        metadata: {\n          contentType: file.mimetype\n        }\n      });\n\n      blobStream.on('error', (error) => {\n        reject('Something is wrong! Unable to upload at the moment.')\n      });\n\n      blobStream.on('finish', () => {\n        const fileName = fileUpload.name;\n\n        //Make file public\n        bucket.file(fileName).makePublic(function(err, apiResponse) {});\n\n        resolve(fileName);\n      });\n\n      blobStream.end(file.buffer);\n    });\n\n    return prom;\n  },\n  getImageFromStorage(fileName){\n    const file = bucket.file(fileName);\n\n    return file.get().then(function(data) {\n      const apiResponse = data[1];\n      return apiResponse;\n    });\n  },\n  deleteImageFromStorage(fileName) {\n    const file = bucket.file(fileName);\n\n    file.delete().then(() => {\n      console.log(`${fileName} deleted.`);\n    })\n    .catch(err => {\n      console.error('ERROR:', err);\n    });\n\n  }\n\n}\n\nexport default imageStorage;\n"]}