{"version":3,"sources":["users.js"],"names":["models","User","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","usersController","single","create","fileFilterValues","body","username","password","email","gender","send","hashedPassword","bcrypt","hashSync","data","title","firstname","lastname","country","phone","userImage","findAll","then","results","users","rows","user","result","auth","catch","e","check","findOne","where"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\nimport multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport models from '../models';\nimport app from '../../app';\n\nconst [User] = [models.User];\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false;\n  let fileTypeError = false;\n  let filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else {\n        deleteFile(tempPath);\n        fileSizeError = true;\n      }\n    } else {\n      deleteFile(tempPath);\n      fileTypeError = true;\n    }\n  }\n  fileErrorArray[0] = fileSizeError;\n  fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  // create a user\n  create(req, res) {\n    // implementing the file filter method\n    const fileFilterValues = fileFilterMethod(req);\n    const fileSizeError = fileFilterValues[0];\n    const fileTypeError = fileFilterValues[1];\n    const filePath = fileFilterValues[2];\n\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n\n    /* Required feilds */\n    if (!req.body.username || !req.body.password || !req.body.email || !req.body.gender) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      firstname: req.body.firstname,\n      lastname: req.body.lastname,\n      username: req.body.username,\n      password: hashedPassword,\n      email: req.body.email,\n      gender: req.body.gender,\n      country: req.body.country,\n      phone: req.body.phone,\n      userImage: filePath\n    };\n\n    /* Search to see if username, email and phone exist before creation to avoid\n    skipping of id on unique constraint */\n    User.findAll().then((results) => {\n      const users = results.rows;\n\n      for(user of users) {\n        if (data.username === user.username) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'username already exists' });\n        }\n        if (data.email === user.email) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'email already exists' });\n        }\n        if (data.phone === user.phone) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'phone already exists' });\n        }\n      }\n\n      // pass data to our model\n      User.create(data)\n        .then((result) => {\n          const user = result.rows[0];\n          const token = tokenMethod(user.id); // Generate token\n          if (token) return res.status(201).send({ user, auth: true, token });\n        })\n        .catch(e => res.status(400).send(e));\n    }).catch(e => res.status(400).send(e));\n  },\n  // login with username and password\n  check(req, res) {\n    // pass data to our model\n    User.findOne({ where: { username: req.body.username, password: req.body.password } })\n      .then((result) => {\n        const user = result.rows[0];\n        // Returning error message for user not found\n        if (!user) return res.status(404).send({ message: 'User not found' });\n        const token = tokenMethod(user.id); // Generate token\n        if (token) return res.status(200).send({ user, auth: true, token }); // Returning user detais\n      })\n      .catch(e => res.status(400).send(e));\n  },\n};\n\nexport default usersController;\n"]}