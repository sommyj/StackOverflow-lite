{"version":3,"sources":["users-spec.js"],"names":[],"mappingsfile":"users-spec.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/test","sourcesContent":["// import chai from 'chai';\n// import supertest from 'supertest';\n// import path from 'path';\n// import chaiHttp from 'chai-http';\n// import app from '../app';\n// import model from '../server/models';\n// import fsHelper from '../utilities/fileSystem';\n//\n// process.env.NODE_ENV = 'test';\n//\n// chai.should();\n// chai.use(chaiHttp);\n// const request = supertest(app);\n// const [User] = [model.User];\n//\n// // Delete file helper method\n// const [deleteFile] = [fsHelper.deleteFile];\n//\n// describe('Users', () => {\n//   beforeEach((done) => { // Before each test we empty the database\n//     User.destroy({ where: {}, force: true }).then(() => done());\n//   });\n//\n//   describe('/POST user', () => {\n//     it(`it should not CREATE a user without username, password,\n//      email, gender`, (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', '')\n//         .field('lastname', '')\n//         .field('username', '')\n//         .field('password', '')\n//         .field('email', '')\n//         .field('gender', '')\n//         .field('country', '')\n//         .field('phone', '')\n//         .attach('userImage', './testFile.png')\n//         .end((err, res) => {\n//           res.should.have.status(206);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').eql('Incomplete field');\n//           done();\n//         });\n//     });\n//\n//     it('it should CREATE a user', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66976498')\n//         .attach('userImage', './testFile.png')\n//\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.body.should.be.a('object');\n//           res.body.user.should.have.property('id').eql(res.body.user.id);\n//           res.body.user.should.have.property('firstname').eql('Justin');\n//           res.body.user.should.have.property('lastname').eql('Ikwuoma');\n//           res.body.user.should.have.property('username').eql('justman');\n//           res.body.user.should.have.property('email').eql('justin@gmail.com');\n//           res.body.user.should.have.property('password').eql(res.body.user.password);\n//           res.body.user.should.have.property('gender').eql('male');\n//           res.body.user.should.have.property('country').eql('Nigeria');\n//           res.body.user.should.have.property('userimage').eql(res.body.user.userimage);\n//           res.body.should.have.property('auth').eql(true);\n//           res.body.should.have.property('token').eql(res.body.token);\n//\n//           // delete test image file\n//           if (path.resolve('./testFile.png')) {\n//             deleteFile(`./${res.body.user.userimage}`);\n//           }\n//           done();\n//         });\n//     });\n//\n//     it('it should CREATE a user without image', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman1')\n//         .field('password', 'abc')\n//         .field('email', 'justin1@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '669796498')\n//         .attach('userImage', '')\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.body.should.be.a('object');\n//           res.body.user.should.have.property('id').eql(res.body.user.id);\n//           res.body.user.should.have.property('firstname').eql('Justin');\n//           res.body.user.should.have.property('lastname').eql('Ikwuoma');\n//           res.body.user.should.have.property('username').eql('justman1');\n//           res.body.user.should.have.property('email').eql('justin1@gmail.com');\n//           res.body.user.should.have.property('password').eql(res.body.user.password);\n//           res.body.user.should.have.property('gender').eql('male');\n//           res.body.user.should.have.property('country').eql('Nigeria');\n//           res.body.user.should.have.property('userimage').eql('');\n//           res.body.should.have.property('auth').eql(true);\n//           res.body.should.have.property('token').eql(res.body.token);\n//\n//           done();\n//         });\n//     });\n//\n//\n//     it('it should not CREATE a user when image file type not jpg/png', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman2')\n//         .field('password', 'abc')\n//         .field('email', 'justin2@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('dob', '2015-11-04')\n//         .attach('userImage', './testFileType.txt')\n//         .end((err, res) => {\n//           res.should.have.status(403);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').eql('Only .png and .jpg files are allowed!');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it(`it should not CREATE a user\n//       when image file size is larger than 2mb`, (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman3')\n//         .field('password', 'abc')\n//         .field('email', 'justin3@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '366976498')\n//         .attach('userImage', './testFileSize.jpg')\n//         .end((err, res) => {\n//           res.should.have.status(403);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message')\n//             .eql('file should not be more than 2mb!');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it('it should not CREATE a user if username already exist', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'Justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman4',\n//         password: 'abc',\n//         email: 'justin4@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '4466976498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/signup')\n//           .field('title', 'mr')\n//           .field('firstname', 'Justin')\n//           .field('lastname', 'Ikwuoma')\n//           .field('username', 'justman4')\n//           .field('password', 'abc')\n//           .field('email', 'justin1@gmail.com')\n//           .field('gender', 'male')\n//           .field('country', 'Nigeria')\n//           .field('phone', '669796498')\n//           .attach('userImage', '')\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('message').eql('username already exists');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not CREATE a user if email already exist', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'Justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman4',\n//         password: 'abc',\n//         email: 'justin4@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '4466976498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/signup')\n//           .field('title', 'mr')\n//           .field('firstname', 'Justin1')\n//           .field('lastname', 'Ikwuoma')\n//           .field('username', 'justman4')\n//           .field('password', 'abc')\n//           .field('email', 'justin4@gmail.com')\n//           .field('gender', 'male')\n//           .field('country', 'Nigeria')\n//           .field('phone', '669796498')\n//           .attach('userImage', '')\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('message').eql('username already exists');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not CREATE a user if phone already exist', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'Justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman4',\n//         password: 'abc',\n//         email: 'justin4@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '669796498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/signup')\n//           .field('title', 'mr')\n//           .field('firstname', 'Justin1')\n//           .field('lastname', 'Ikwuoma')\n//           .field('username', 'justman4')\n//           .field('password', 'abc')\n//           .field('email', 'justin@gmail.com')\n//           .field('gender', 'male')\n//           .field('country', 'Nigeria')\n//           .field('phone', '669796498')\n//           .attach('userImage', '')\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('message').eql('username already exists');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not get a particular user if POST a wrong username', (done) => {\n//       User.create({\n//         title: 'mr',\n//         firstname: 'justin',\n//         lastname: 'Ikwuoma',\n//         username: 'justman5',\n//         password: 'abc',\n//         email: 'justin5@gmail.com',\n//         gender: 'male',\n//         country: 'Nigeria',\n//         phone: '566976498',\n//         userImage: ''\n//       }).then(() => {\n//         request\n//           .post('/auth/v1/login')\n//           .send({ username: 'just', password: 'abc' })\n//           .end((err, res) => {\n//             res.should.have.status(400);\n//             res.body.should.be.a('object');\n//             res.body.message.should.be.eql('Invalid username/password');\n//             done();\n//           });\n//       });\n//     });\n//\n//     it('it should not get a particular user if POST a wrong username', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman4')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '669796498')\n//         .attach('userImage', '')\n//         .end(() => {\n//           request\n//             .post('/auth/v1/login')\n//             .send({ username: 'just', password: 'abc' })\n//             .end((err, res) => {\n//               res.should.have.status(400);\n//               res.body.should.be.a('object');\n//               res.body.message.should.be.eql('Invalid username/password');\n//               done();\n//             });\n//         });\n//     });\n//\n//     it('it should POST username && password and get the particular user', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman4')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '669796498')\n//         .attach('userImage', '')\n//         .end(() => {\n//           request\n//             .post('/auth/v1/login')\n//             .send({ username: 'justman4', password: 'abc' })\n//             .end((err, res) => {\n//               res.should.have.status(200);\n//               res.body.should.be.a('object');\n//               res.body.user.should.have.property('id');\n//               res.body.user.should.have.property('firstname').eql('Justin');\n//               res.body.user.should.have.property('lastname').eql('Ikwuoma');\n//               res.body.user.should.have.property('username').eql('justman4');\n//               res.body.user.should.have.property('email').eql('justin@gmail.com');\n//               res.body.user.should.have.property('password').eql(res.body.user.password);\n//               res.body.user.should.have.property('userimage').eql('');\n//               res.body.should.have.property('auth').eql(true);\n//               res.body.should.have.property('token').eql(res.body.token);\n//               done();\n//             });\n//         });\n//     });\n//   });\n// });\n"]}