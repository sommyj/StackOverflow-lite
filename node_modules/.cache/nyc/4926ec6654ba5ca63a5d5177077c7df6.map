{"version":3,"sources":["answers-spec.js"],"names":["process","env","NODE_ENV","chai","should","use","chaiHttp","request","app","model","User","Question","Answer","imageStorage","deleteImageFromStorage","describe","beforeEach","done","destroy","where","force","then","it","post","field","attach","end","err1","res1","set","body","token","err2","res2","id","err","res","have","status","be","a","property","eql","user","answerimage","console","error"],"mappings":"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cCC,8BAAQC,KAAR;;AAdD;AAiBH7B;;AAjBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALP;;AAAA;AAAA;AAAA;AAAA;AAwBD,SAhCH;AAiCD,OA9CH;AA+CD,KAhDD;AAiiUF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CA70BD","file":"answers-spec.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/test","sourcesContent":["import chai from 'chai';\nimport supertest from 'supertest';\nimport path from 'path';\nimport chaiHttp from 'chai-http';\n\nimport app from '../app';\nimport model from '../server/models';\nimport fsHelper from '../utilities/fileSystem';\nimport imageStorage from '../server/controllers/utilities/filebaseStorage';\n\nprocess.env.NODE_ENV = 'test';\n\nchai.should();\nchai.use(chaiHttp);\nconst request = supertest(app);\nconst [User] = [model.User];\nconst [Question] = [model.Question];\nconst [Answer] = [model.Answer];\nconst [deleteImageFromStorage] = [imageStorage.deleteImageFromStorage];\n\n// // Delete file helper method\n// const [deleteFile] = [fsHelper.deleteFile];\n//\ndescribe('Answers', () => {\n  beforeEach((done) => { // Before each test we empty the database\n    User.destroy({ where: {}, force: true });\n    Question.destroy({ where: {}, force: true });\n    Answer.destroy({ where: {}, force: true }).then(() => done());\n  });\n\n  describe('/POST answer', () => {\n    it('it should not CREATE an answer without response', (done) => {\n      request\n        .post('/auth/v1/signup')\n        .field('title', 'mr')\n        .field('firstname', 'Justin')\n        .field('lastname', 'Ikwuoma')\n        .field('username', 'justman')\n        .field('password', 'abc')\n        .field('email', 'justin@gmail.com')\n        .field('gender', 'male')\n        .field('country', 'Nigeria')\n        .field('phone', '66979649')\n        .attach('userImage', '')\n        .end((err1, res1) => {\n          request\n            .post('/v1/questions')\n            .set('x-access-token', res1.body.token)\n            .field('title', 'How far na')\n            .field('question', 'I just wan no how u dey')\n            .field('tags', 'java,javascript')\n            .attach('questionImage', '')\n            .end((err2, res2) => {\n              request\n                .post(`/v1/questions/${res2.body.id}/answers`)\n                .set('x-access-token', res1.body.token)\n                .field('response', '')\n                .attach('answerImage', '')\n                .end((err, res) => {\n                  res.should.have.status(206);\n                  res.body.should.be.a('object');\n                  res.body.should.have.property('message').eql('Incomplete field');\n\n                  done();\n                });\n            });\n        });\n    });\n    it('it should CREATE an answer', (done) => {\n      request\n        .post('/auth/v1/signup')\n        .field('title', 'mr')\n        .field('firstname', 'Justin')\n        .field('lastname', 'Ikwuoma')\n        .field('username', 'justman')\n        .field('password', 'abc')\n        .field('email', 'justin@gmail.com')\n        .field('gender', 'male')\n        .field('country', 'Nigeria')\n        .field('phone', '66979649')\n        .attach('userImage', '')\n        .end((err1, res1) => {\n          request\n            .post('/v1/questions')\n            .set('x-access-token', res1.body.token)\n            .field('title', 'How far na')\n            .field('question', 'I just wan no how u dey')\n            .field('tags', 'java,javascript')\n            .attach('questionImage', '')\n            .end((err2, res2) => {\n              request\n                .post(`/v1/questions/${res2.body.id}/answers`)\n                .set('x-access-token', res1.body.token)\n                .field('response', 'very fine')\n                .attach('answerImage', './testFile.png')\n                .end(async(err, res) => {\n                  res.should.have.status(201);\n                  res.body.should.be.a('object');\n                  res.body.should.have.property('response').eql('very fine');\n                  res.body.should.have.property('userid').eql(res1.body.user.id);\n                  res.body.should.have.property('accepted').eql(false);\n                  res.body.should.have.property('vote').eql(0);\n                  res.body.should.have.property('answerimage').eql(res.body.answerimage);\n\n                  // delete test image file\n                  if (res.body.answerimage) {\n                    try {\n                      await deleteImageFromStorage(res.body.answerimage);\n                    } catch(error){\n                      console.error(error);\n                    }\n                  }\n                  done();\n                });\n            });\n        });\n    });\n//     it('it should CREATE an answer without image', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   res.should.have.status(201);\n//                   res.body.should.be.a('object');\n//                   res.body.should.have.property('response').eql('very fine');\n//                   res.body.should.have.property('userid').eql(res1.body.user.id);\n//                   res.body.should.have.property('accepted').eql(false);\n//                   res.body.should.have.property('vote').eql(0);\n//                   res.body.should.have.property('answerimage').eql('');\n//\n//                   done();\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not CREATE an answer when image file type not jpg/png', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', './testFileType.txt')\n//                 .end((err, res) => {\n//                   res.should.have.status(403);\n//                   res.body.should.be.a('object');\n//                   res.body.should.have.property('message').eql('Only .png and .jpg files are allowed!');\n//                   res.body.should.have.property('error').eql(true);\n//\n//                   done();\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not CREATE an answer when image file size is larger than 2mb', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', './testFileSize.jpg')\n//                 .end((err, res) => {\n//                   res.should.have.status(403);\n//                   res.body.should.be.a('object');\n//                   res.body.should.have.property('message')\n//                     .eql('file should not be more than 2mb!');\n//                   res.body.should.have.property('error').eql(true);\n//\n//                   done();\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not CREATE an answer when a token is not provided', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', './testFile.png')\n//                 .end((err, res) => {\n//                   res.should.have.status(401);\n//                   res.body.should.be.a('object');\n//                   res.body.should.have.property('auth').eql(false);\n//                   res.body.should.have.property('message').eql('No token provided.');\n//\n//                   done();\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not CREATE an answer when it fails to authenticate token', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', 'jdkjdfskjs43354mxxnzsdz.drfsff.srfsf35324')\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', './testFile.png')\n//                 .end((err, res) => {\n//                   res.should.have.status(500);\n//                   res.body.should.be.a('object');\n//                   res.body.should.have.property('auth').eql(false);\n//                   res.body.should.have.property('message').eql('Failed to authenticate token.');\n//\n//                   done();\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not CREATE an answer when user is delete but token exist', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               User.destroy({ where: { id: res1.body.user.id } }).then(() => {\n//                 request\n//                   .post(`/v1/questions/${res2.body.id}/answers`)\n//                   .set('x-access-token', res1.body.token)\n//                   .field('response', 'very fine')\n//                   .attach('answerImage', './testFile.png')\n//                   .end((err, res) => {\n//                     res.should.have.status(400);\n//                     res.body.should.be.a('object');\n//                     res.body.should.have.property('message')\n//                       .eql('user has been removed from the database');\n//                     done();\n//                   });\n//               });\n//             });\n//         });\n//     });\n  });\n\n//   /*\n//    * Test the /PUT/:id route\n//    */\n//   describe('/PUT/:id answer', () => {\n//     it('it should UPDATE an answer given the answer id by the question author', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('accepted', true)\n//                     .end((err, res) => {\n//                       res.should.have.status(200);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('response').eql('very fine');\n//                       res.body.should.have.property('userid').eql(res1.body.user.id);\n//                       res.body.should.have.property('accepted').eql(true);\n//                       res.body.should.have.property('vote').eql(0);\n//                       res.body.should.have.property('answerimage').eql('');\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//\n//     it('it should UPDATE an answer given the answer id by the answer author', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', 'i am ok')\n//                     .attach('answerImage', './testFile.png')\n//                     .end((err, res) => {\n//                       res.should.have.status(200);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('response').eql('i am ok');\n//                       res.body.should.have.property('userid').eql(res1.body.user.id);\n//                       res.body.should.have.property('accepted').eql(false);\n//                       res.body.should.have.property('vote').eql(0);\n//                       res.body.should.have.property('answerimage').eql(res.body.answerimage);\n//\n//                       // delete test image file\n//                       if (path.resolve('./testFile.png')) {\n//                         deleteFile(`./${res.body.answerimage}`);\n//                       }\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not UPDATE an answer given the wrong answer id', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end(() => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/-1`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', 'i am ok')\n//                     .attach('answerImage', './testFile.png')\n//                     .end((err, res) => {\n//                       res.should.have.status(404);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('message').eql('answer not found');\n//\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not UPDATE an answer given the wrong question id', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/-1/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', 'i am ok')\n//                     .attach('answerImage', './testFile.png')\n//                     .end((err, res) => {\n//                       res.should.have.status(404);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('message').eql('question not found');\n//\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it(`it should UPDATE an answer given the id and\n//     maintain already existing fields and file if none is entered`, (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', './testFile.png')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', '')\n//                     .attach('answerImage', '')\n//                     .end((err, res) => {\n//                       res.should.have.status(200);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('response').eql('very fine');\n//                       res.body.should.have.property('userid').eql(res1.body.user.id);\n//                       res.body.should.have.property('accepted').eql(false);\n//                       res.body.should.have.property('vote').eql(0);\n//                       res.body.should.have.property('answerimage').eql(res.body.answerimage);\n//\n//                       // delete test image file\n//                       if (path.resolve('./testFile.png')) {\n//                         deleteFile(`./${res.body.answerimage}`);\n//                       }\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should UPDATE a answer given the id and replace already existing file', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', './testFile.png')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', '')\n//                     .attach('answerImage', './testFile.png')\n//                     .end((err, res) => {\n//                       res.should.have.status(200);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('response').eql('very fine');\n//                       res.body.should.have.property('userid').eql(res1.body.user.id);\n//                       res.body.should.have.property('accepted').eql(false);\n//                       res.body.should.have.property('vote').eql(0);\n//                       res.body.should.have.property('answerimage').eql(res.body.answerimage);\n//\n//                       // delete test image file\n//                       if (path.resolve('./testFile.png')) {\n//                         deleteFile(`./${res.body.answerimage}`);\n//                       }\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not UPDATE an answer when image file type not jpg/png', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', '')\n//                     .attach('answerImage', './testFileType.txt')\n//                     .end((err, res) => {\n//                       res.should.have.status(403);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('message').eql('Only .png and .jpg files are allowed!');\n//                       res.body.should.have.property('error').eql(true);\n//\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it(`it should not UPDATE a answer\n//     when image file size is larger than 2mb`, (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', res1.body.token)\n//                     .field('response', '')\n//                     .attach('answerImage', './testFileSize.jpg')\n//                     .end((err, res) => {\n//                       res.should.have.status(403);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('message').eql('file should not be more than 2mb!');\n//                       res.body.should.have.property('error').eql(true);\n//\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not UPDATE an answer when a token is not provided', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .field('response', '')\n//                     .attach('answerImage', '')\n//                     .end((err, res) => {\n//                       res.should.have.status(401);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('auth').eql(false);\n//                       res.body.should.have.property('message').eql('No token provided.');\n//\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not UPDATE a answer when it fails to authenticate token.', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               request\n//                 .post(`/v1/questions/${res2.body.id}/answers`)\n//                 .set('x-access-token', res1.body.token)\n//                 .field('response', 'very fine')\n//                 .attach('answerImage', '')\n//                 .end((err, res) => {\n//                   request\n//                     .put(`/v1/questions/${res2.body.id}/answers/${res.body.id}`)\n//                     .set('x-access-token', 'nmdhnjf.njfjfj.fkfkfk')\n//                     .field('response', '')\n//                     .attach('answerImage', '')\n//                     .end((err, res) => {\n//                       res.should.have.status(500);\n//                       res.body.should.be.a('object');\n//                       res.body.should.have.property('auth').eql(false);\n//                       res.body.should.have.property('message').eql('Failed to authenticate token.');\n//\n//                       done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n//     it('it should not UPDATE a answer when user is unauthorize.', (done) => {\n//       request\n//         .post('/auth/v1/signup')\n//         .field('title', 'mr')\n//         .field('firstname', 'Justin')\n//         .field('lastname', 'Ikwuoma')\n//         .field('username', 'justman')\n//         .field('password', 'abc')\n//         .field('email', 'justin@gmail.com')\n//         .field('gender', 'male')\n//         .field('country', 'Nigeria')\n//         .field('phone', '66979649')\n//         .attach('userImage', '')\n//         .end((err1, res1) => {\n//           request\n//             .post('/v1/questions')\n//             .set('x-access-token', res1.body.token)\n//             .field('title', 'How far na')\n//             .field('question', 'I just wan no how u dey')\n//             .field('tags', 'java,javascript')\n//             .attach('questionImage', '')\n//             .end((err2, res2) => {\n//               Answer.create({ response: 'very fine', answerImage: '' }).then((answer) => {\n//                 request\n//                   .put(`/v1/questions/${res2.body.id}/answers/${answer.rows[0].id}`)\n//                   .set('x-access-token', res1.body.token)\n//                   .field('response', '')\n//                   .attach('answerImage', '')\n//                   .end((err, res) => {\n//                     res.should.have.status(403);\n//                     res.body.should.be.a('object');\n//                     res.body.should.have.property('auth').eql(false);\n//                     res.body.should.have.property('message').eql('User not allowed');\n//\n//                     done();\n//                   });\n//               });\n//             });\n//         });\n//     });\n//   });\n});\n"]}