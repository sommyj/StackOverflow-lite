{"version":3,"sources":["questions.js"],"names":["models","Question","Answer","imageStorage","uploadImageToStorage","deleteImageFromStorage","getImageFromStorage","errorHandler","createHandlerError","incompleteFieldHandlerError","fileHandleError","questionHandlerError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","parametersHandlerError","upload","storage","multer","memoryStorage","fileSizeLimit","questionsController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","body","title","question","tags","file","fileName","findAll","then","results","questions","rows","questionCount","length","fileError","status","send","data","userId","questionImage","result","catch","error","name","constraint","list","auth","selectionType","query","where","order","promises","map","findOne","questionid","id","answer","answers","Promise","all","retrieve","message","findById","params","questionId","userid","user","questionimage","imageResponse","mediaLink","answerQues","answerimage","ansImageResponse","destroy"],"mappings":"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","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport imageStorage from './utilities/filebaseStorage';\n\nconst [Question] = [models.Question];\nconst [Answer] = [models.Answer];\nconst [uploadImageToStorage] = [imageStorage.uploadImageToStorage];\nconst [deleteImageFromStorage] = [imageStorage.deleteImageFromStorage];\nconst [getImageFromStorage] = [imageStorage.getImageFromStorage];\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [fileHandleError] = [errorHandler.fileHandleError]; // file handleError\nconst [questionHandlerError] = [errorHandler.questionHandlerError]; // question handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n// parameters handlerError\nconst [parametersHandlerError] = [errorHandler.parametersHandlerError];\n\nconst upload = multer({\n  storage: multer.memoryStorage()\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a question\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) {\n      return incompleteFieldHandlerError(res);\n    }\n\n    const [file] = [req.file];\n    let fileName = '';\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then(async (results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (req.body.title === question.title) return questionHandlerError(res);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        if (file) {\n          // implementing the file filter method\n          const fileError = fileFilterMethod(req, fileSizeLimit);\n          if (fileError) return fileHandleError(res, fileError);\n          try {\n            fileName = await uploadImageToStorage(file, 'questionImages');\n          } catch (error) {\n            return res.status(400).send(error);\n          }\n        }\n\n        // Grab data from http request\n        const data = {\n          title: req.body.title,\n          question: req.body.question,\n          userId: decodedID,\n          tags: req.body.tags,\n          questionImage: fileName,\n        };\n        Question.create(data) // pass data to our model\n          .then((result) => {\n            const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((error) => {\n            if (error.name === 'error' && error.constraint === 'questions_userid_fkey') {\n              return userNotPrestentHandlerError(res, fileName);\n            }\n            return createHandlerError(error, res, fileName);\n          });\n      }\n    }).catch(error => createHandlerError(error, res));\n  },\n  list(req, res) {\n    let decodedID; // Identity gotten from jwt\n    let auth = false; // Session authentication\n    const authValues = authMethod(req);\n\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    // Check if token is still valid\n    if (noTokenProviderError) {\n      auth = false;\n    } else if (failedAuthError) auth = false;\n    else auth = true;\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    let selectionType;\n    if (req.query.userId) {\n      selectionType = Question\n        .findAll({ where: { userId: decodedID }, order: ['createdat', 'DESC'] });\n    } else {\n      selectionType = Question.findAll({ order: ['createdat', 'DESC'] });\n    }\n    selectionType.then(async (results) => {\n      const questions = results.rows;\n\n      const promises = questions.map(async (question) => {\n        try {\n          const answer = await Answer.findOne({ where: { questionid: question.id }, order: ['createdat', 'ASC'] });\n          question.answers = answer.rows;\n        } catch (error) {\n          return res.status(400).send(error);\n        }\n      });\n      await Promise.all(promises);\n\n      return res.status(200).send({ questions, auth });\n    }).catch(error => res.status(400).send(error));\n  },\n  retrieve(req, res) {\n    let decodedID; // Identity gotten from jwt\n    let auth = false; // Session authentication\n    const authValues = authMethod(req);\n\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    // Check if token is still valid\n    if (noTokenProviderError) {\n      auth = false;\n    } else if (failedAuthError) auth = false;\n    else auth = true;\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    if (parametersHandlerError(req)) {\n      return res.status(400).send({ message: 'question not found' });\n    }\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      // Getting answers to the question\n      Answer.findOne({ where: { questionid: question.id }, order: ['createdat', 'ASC'] }).then(async (answer) => {\n        if (decodedID === question.userid) question.user = true;\n        else question.user = false;\n        question.auth = auth;\n        question.answers = answer.rows;\n        if (question.questionimage) {\n          try {\n            const imageResponse = await getImageFromStorage(question.questionimage);\n            question.questionimage = imageResponse.mediaLink;\n          } catch (error) {\n            return res.status(400).send(error);\n          }\n          const promises = question.answers.map(async (answerQues) => {\n            if (answerQues.answerimage) {\n              try {\n                const ansImageResponse = await getImageFromStorage(answerQues.answerimage);\n                answerQues.answerimage = ansImageResponse.mediaLink;\n              } catch (error) {\n                return res.status(400).send(error);\n              }\n            }\n          });\n          await Promise.all(promises);\n        }\n        return res.status(200).send(question);\n      })\n        .catch(error => res.status(400).send(error));\n    }).catch(error => res.status(400).send(error));\n  },\n  destroy(req, res) {\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    if (parametersHandlerError(req, res)) {\n      return res.status(400).send({ message: 'question not found' });\n    }\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      if (decodedID !== question.userid) {\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n      }\n      Question.destroy({ where: { id: question.id } }).then(async () => {\n        if (question.questionimage) {\n          try {\n            await deleteImageFromStorage(question.questionimage);\n          } catch (error) {\n            return res.status(400).send(error);\n          }\n        }\n        return res.status(204).send();\n      });\n    }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default questionsController;\n"]}