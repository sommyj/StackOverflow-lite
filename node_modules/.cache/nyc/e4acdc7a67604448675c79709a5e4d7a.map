{"version":3,"sources":["questions.js"],"names":["models","Question","createHandlerError","errorHandler","incompleteFieldHandlerError","fileTypeHandleError","fileSizeHandleError","questionHandlerError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","upload","dest","fileSizeLimit","authMethod","req","authMethodArray","noTokenProviderError","failedAuth","decodedID","token","body","query","headers","file","deleteFile","path","jwt","verify","app","get","err","decoded","id","questionsController","single","create","res","authValues","failedAuthError","decodedIDFromMethod","fileSizeError","fileTypeError","filePath","title","question","tags","data","userId","questionImage","findAll","then","results","questions","rows","questionCount","length","result","status","send","catch","e","name","constraint","error","list"],"mappings":"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","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport jwt from 'jsonwebtoken';\nimport models from '../models';\nimport app from '../../app';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\n\nconst [Question] = [models.Question];\n\nconst createHandlerError = errorHandler.createHandlerError //create handleError\nconst incompleteFieldHandlerError = errorHandler.incompleteFieldHandlerError //incomplete field handleError\nconst fileTypeHandleError = errorHandler.fileTypeHandleError // file type handleError\nconst fileSizeHandleError = errorHandler.fileSizeHandleError // file size handleError\nconst questionHandlerError = errorHandler.questionHandlerError //question handleError\nconst userNotPrestentHandlerError = errorHandler.userNotPrestentHandlerError //user deleted handleError\nconst noTokenHandlerError = errorHandler.noTokenHandlerError //no token provided handleError\nconst failedAuthHandlerError = errorHandler.failedAuthHandlerError //failed Authentication handlerError\n\nconst upload = multer({\n  dest: './questionsUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n// /* File filter handle method */\n// const fileFilterMethod = (req) => {\n//   const fileErrorArray = [];\n//   let fileSizeError = false, fileTypeError = false, filePath = '';\n//\n//   if (req.file) {\n//     const tempPath = `./${req.file.path}`;\n//     const targetPath = `./questionsUploads/${new Date().toISOString() + req.file.originalname}`;\n//     if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n//       if (req.file.size <= fileSizeLimit) {\n//         renameFile(tempPath, targetPath);\n//         // remove the dot in targetPath\n//         filePath = targetPath.substring(1, targetPath.length);\n//       } else { deleteFile(tempPath); fileSizeError = true; }\n//     } else { deleteFile(tempPath); fileTypeError = true; }\n//   }\n//   fileErrorArray[0] = fileSizeError; fileErrorArray[1] = fileTypeError;\n//   fileErrorArray[2] = filePath;\n//\n//   return fileErrorArray;\n// };\n\n/* Authentication handle method */\nconst authMethod = (req) => {\n  const authMethodArray = [];\n  let noTokenProviderError = false;\n  let failedAuth = false;\n  let decodedID;\n\n  // check header or url parameters or post parameters for token\n  const token = req.body.token || req.query.token || req.headers['x-access-token'];\n  if (!token) {\n    if (req.file) deleteFile(`./${req.file.path}`);\n    noTokenProviderError = true;\n  }\n\n  // verifies secret and checks exp\n  jwt.verify(token, app.get('superSecret'), (err, decoded) => {\n    if (err) {\n      if (!noTokenProviderError) {\n        if (req.file) deleteFile(`./${req.file.path}`);\n        failedAuth = true;\n      }\n    } else decodedID = decoded.id;\n  });\n\n  authMethodArray[0] = noTokenProviderError;\n  authMethodArray[1] = failedAuth;\n  authMethodArray[2] = decodedID;\n\n  return authMethodArray;\n};\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a user\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res, req.file);\n    if (failedAuthError) return failedAuthHandlerError(res, req.file);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'questionsUploads');;\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags)\n      return incompleteFieldHandlerError(res, filePath);\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      question: req.body.question,\n      userId: decodedID,\n      tags: req.body.tags,\n      questionImage: filePath,\n    };\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then((results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (data.title === question.title) questionHandlerError(res, filePath);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        Question.create(data) // pass data to our model\n          .then((result) => { const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((e) => {\n            if (e.name === 'error' && e.constraint === 'questions_userid_fkey')\n              return userNotPrestentHandlerError(res, filePath);\n            return createHandlerError(error, res, filePath);\n          });\n      }\n    }).catch(e => createHandlerError(error, res, filePath));\n  },\n  list(req, res) {\n    Question.findAll().then((results) => {\n      const questions = results.rows;\n      return res.status(200).send(questions);\n    }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default questionsController;\n"]}