{"version":3,"sources":["questions.js"],"names":["models","Question","Answer","errorHandler","createHandlerError","incompleteFieldHandlerError","fileTypeHandleError","fileSizeHandleError","questionHandlerError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","parametersHandlerError","fsHelper","deleteFile","upload","dest","fileSizeLimit","questionsController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","fileSizeError","fileTypeError","filePath","body","title","question","tags","data","userId","questionImage","findAll","then","results","questions","rows","questionCount","length","result","status","send","catch","error","name","constraint","list","auth","selectionType","query","where","order","retrieve","message","findById","params","questionId","findOne","questionid","id","answer","userid","user","answers","destroy","questionimage"],"mappings":"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","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport fsHelper from '../../utilities/fileSystem';\n\nconst [Question] = [models.Question];\nconst [Answer] = [models.Answer];\n\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [fileTypeHandleError] = [errorHandler.fileTypeHandleError]; // file type handleError\nconst [fileSizeHandleError] = [errorHandler.fileSizeHandleError]; // file size handleError\nconst [questionHandlerError] = [errorHandler.questionHandlerError]; // question handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n// parameters handlerError\nconst [parametersHandlerError] = [errorHandler.parametersHandlerError];\n\nconst [deleteFile] = [fsHelper.deleteFile];// Delete file helper method\n\nconst upload = multer({\n  dest: './questionsUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a question\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'questionsUploads');\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) {\n      return incompleteFieldHandlerError(res, filePath);\n    }\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      question: req.body.question,\n      userId: decodedID,\n      tags: req.body.tags,\n      questionImage: filePath,\n    };\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then((results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (data.title === question.title) return questionHandlerError(res, filePath);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        Question.create(data) // pass data to our model\n          .then((result) => {\n            const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((error) => {\n            if (error.name === 'error' && error.constraint === 'questions_userid_fkey') {\n              return userNotPrestentHandlerError(res, filePath);\n            }\n            return createHandlerError(error, res, filePath);\n          });\n      }\n    }).catch(error => createHandlerError(error, res, filePath));\n  },\n  list(req, res) {\n    let decodedID; // Identity gotten from jwt\n    let auth = false; // Session authentication\n    const authValues = authMethod(req);\n\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    // Check if token is still valid\n    if (noTokenProviderError) {\n      auth = false;\n    } else if (failedAuthError) auth = false;\n    else auth = true;\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    let selectionType;\n    if (req.query.userId) {\n      selectionType = Question\n        .findAll({ where: { userId: decodedID }, order: ['createdat', 'DESC'] });\n    } else {\n      selectionType = Question.findAll({ order: ['createdat', 'DESC'] });\n    }\n    selectionType.then((results) => {\n      const questions = results.rows;\n      return res.status(200).send({ questions, auth });\n    }).catch(error => res.status(400).send(error));\n  },\n  retrieve(req, res) {\n    let decodedID; // Identity gotten from jwt\n    let auth = false; // Session authentication\n    const authValues = authMethod(req);\n\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    // Check if token is still valid\n    if (noTokenProviderError) {\n      auth = false;\n    } else if (failedAuthError) auth = false;\n    else auth = true;\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    if (parametersHandlerError(req)) {\n      return res.status(400).send({ message: 'question not found' });\n    }\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      // Getting answers to the question\n      Answer.findOne({ where: { questionid: question.id }, order: ['createdat', 'ASC'] }).then((answer) => {\n        if (decodedID === question.userid) question.user = true;\n        else question.user = false;\n        question.auth = auth;\n        question.answers = answer.rows;\n        return res.status(200).send(question);\n      })\n        .catch(error => res.status(400).send(error));\n    }).catch(error => res.status(400).send(error));\n  },\n  destroy(req, res) {\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    if (parametersHandlerError(req, res)) {\n      return res.status(400).send({ message: 'question not found' });\n    }\n\n    Question.findById(req.params.questionId).then((result) => {\n      const question = result.rows[0];\n      if (!question) return res.status(404).send({ message: 'question not found' });\n      if (decodedID !== question.userid) {\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n      }\n      Question.destroy({ where: { id: question.id } }).then(() => {\n        if (question.questionimage) {\n          deleteFile(`./${question.questionimage}`);\n        }\n        return res.status(204).send();\n      });\n    }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default questionsController;\n"]}