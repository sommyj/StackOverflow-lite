{"version":3,"sources":["users.js"],"names":["models","User","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","usersController","single","create","body","username","password","email","gender","send","hashedPassword","bcrypt","hashSync","data","title","firstname","lastname","country","phone","userImage","findAll","then","results","users","rows","userCount","user","console","log","result","auth","catch","e","check","findOne","where"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport models from '../models';\nimport app from '../../app';\n\nconst [User] = [models.User];\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false;\n  let fileTypeError = false;\n  let filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else {\n        deleteFile(tempPath);\n        fileSizeError = true;\n      }\n    } else {\n      deleteFile(tempPath);\n      fileTypeError = true;\n    }\n  }\n  fileErrorArray[0] = fileSizeError;\n  fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  create(req, res) { // create a user\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath ] = fileFilterMethod(req);\n\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.username || !req.body.password || !req.body.email || !req.body.gender) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    // Grab data from http request\n    const data = {title: req.body.title, firstname: req.body.firstname,\n      lastname: req.body.lastname, username: req.body.username,\n      password: hashedPassword, email: req.body.email,\n      gender: req.body.gender, country: req.body.country,\n      phone: req.body.phone, userImage: filePath};\n    /* Search to see if username, email and phone exist before creation\n    to avoid skipping of id on unique constraint */\n    User.findAll().then((results) => {\n      const users = results.rows;\n      let userCount = 0;\n      for (const user of users) {\n        if (data.username === user.username) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'username already exists' }); }\n        if (data.email === user.email) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'email already exists' }); }\n        if (data.phone === user.phone) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'phone already exists' }); }\n          userCount += 1;\n      }\n\n      if(userCount === users.length) console.log(`-------${users.length}--------`);\n      User.create(data) // pass data to our model\n        .then((result) => { const user = result.rows[0];\n          const token = tokenMethod(user.id); // Generate token\n          if (token) return res.status(201).send({ user, auth: true, token });\n        }).catch(e => res.status(400).send(e));\n    }).catch(e => res.status(400).send(e));\n  },\n  check(req, res) { // login with username and password\n    // pass data to our model\n    User.findOne({ where: { username: req.body.username, password: req.body.password } })\n      .then((result) => { const user = result.rows[0];\n        // Returning error message for user not found\n        if (!user) return res.status(404).send({ message: 'User not found' });\n        const token = tokenMethod(user.id); // Generate token\n        // Returning user detais\n        if (token) return res.status(200).send({ user, auth: true, token });\n      }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default usersController;\n"]}