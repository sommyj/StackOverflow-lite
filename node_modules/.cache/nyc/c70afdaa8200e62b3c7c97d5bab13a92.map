{"version":3,"sources":["users.js"],"names":["models","User","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","uniqueFieldErrorMethod","users","uniqueErrorArray","usernameError","emailError","phoneError","userCount","user","data","username","email","phone","usersController","single","create","body","password","gender","send","hashedPassword","bcrypt","hashSync","title","firstname","lastname","country","userImage","findAll","then","results","rows","result","auth","catch","e","check","findOne","where","passIsEqual","compareSync"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport models from '../models';\nimport app from '../../app';\n\nconst [User] = [models.User];\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false;\n  let fileTypeError = false;\n  let filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else {\n        deleteFile(tempPath);\n        fileSizeError = true;\n      }\n    } else {\n      deleteFile(tempPath);\n      fileTypeError = true;\n    }\n  }\n  fileErrorArray[0] = fileSizeError; fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n/* This method searches to see if username, email and phone exist before\ncreation to avoid skipping of id on unique constraint */\nconst uniqueFieldErrorMethod = (users) => {\n  const uniqueErrorArray = [];\n  let usernameError, emailError, phoneError = false;\n  let userCount = 0;\n\n    for (const user of users) {\n      if (data.username === user.username) usernameError = true;\n      if (data.email === user.email) emailError = true;\n      if (data.phone === user.phone) phoneError = true;\n        userCount += 1;\n    }\n    uniqueErrorArray[0] = usernameError; uniqueErrorArray[1] = emailError;\n    uniqueErrorArray[2] = phoneError; uniqueErrorArray[3] = userCount;\n    return uniqueErrorArray;\n}\n\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  create(req, res) { // create a user\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath ] = fileFilterMethod(req);\n\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.username || !req.body.password || !req.body.email || !req.body.gender) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n    //Auto-gen a salt and hash\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    // Grab data from http request\n    const data = {title: req.body.title, firstname: req.body.firstname,\n      lastname: req.body.lastname, username: req.body.username,\n      password: hashedPassword, email: req.body.email, gender: req.body.gender,\n      country: req.body.country, phone: req.body.phone, userImage: filePath};\n\n\n\n    /* Search to see if username, email and phone exist before creation\n    to avoid skipping of id on unique constraint */\n    User.findAll().then((results) => {\n      const users = results.rows;\n    //   for (const user of users) {\n    //     if (data.username === user.username) {\n    //       if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n    //       return res.status(400).send({ message: 'username already exists' }); }\n    //     if (data.email === user.email) {\n    //       if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n    //       return res.status(400).send({ message: 'email already exists' }); }\n    //     if (data.phone === user.phone) {\n    //       if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n    //       return res.status(400).send({ message: 'phone already exists' }); }\n    //       userCount += 1;\n    //   }\n\n    const [usernameError, emailError, phoneError, userCount] = uniqueFieldErrorMethod(users);\n\n    if (usernameError) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(400).send({ message: 'username already exists' }); }\n\n    if (emailError) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(400).send({ message: 'email already exists' }); }\n\n    if (phoneError) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(400).send({ message: 'phone already exists' }); }\n\n\n      //Create user after checking if it exist\n      if(userCount === users.length) {\n      User.create(data) // pass data to our model\n        .then((result) => { const user = result.rows[0];\n          const token = tokenMethod(user.id); // Generate token\n          if (token) return res.status(201).send({ user, auth: true, token });\n        }).catch(e => res.status(400).send(e)); }\n    }).catch(e => res.status(400).send(e));\n  },\n  check(req, res) { // login with username and password\n    // pass data to our model\n    User.findOne({ where: { username: req.body.username } })\n      .then((result) => { const user = result.rows[0];\n        // Returning error message for user not found\n        if (!user) return res.status(400).send({ message: 'Invalid username/password' });\n        // Compare hash from your password DB.\n        const passIsEqual = bcrypt.compareSync(req.body.password, user.password)\n        if (!passIsEqual) return res.status(404).send({ message: 'Invalid username/password' });\n        const token = tokenMethod(user.id); // Generate token\n        // Returning user detais\n        if (token) return res.status(200).send({ user, auth: true, token });\n      }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default usersController;\n"]}