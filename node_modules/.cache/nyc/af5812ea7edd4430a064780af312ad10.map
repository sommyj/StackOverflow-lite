{"version":3,"sources":["questions.js"],"names":["models","Question","errorHandler","createHandlerError","incompleteFieldHandlerError","fileTypeHandleError","fileSizeHandleError","questionHandlerError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","upload","dest","fileSizeLimit","questionsController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","fileSizeError","fileTypeError","filePath","body","title","question","tags","data","userId","questionImage","findAll","then","results","questions","rows","questionCount","length","result","status","send","catch","e","name","constraint","error","list","retrieve"],"mappings":"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","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\n\nconst [Question] = [models.Question];\n\nconst [createHandlerError, incompleteFieldHandlerError, fileTypeHandleError, fileSizeHandleError\n] = [errorHandler]; // create handleError\n// incomplete field handleError\n// const [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError]\n// const fileTypeHandleError = errorHandler.fileTypeHandleError // file type handleError\n// const fileSizeHandleError = errorHandler.fileSizeHandleError // file size handleError\nconst questionHandlerError = errorHandler.questionHandlerError; // question handleError\nconst userNotPrestentHandlerError = errorHandler.userNotPrestentHandlerError; // user deleted handleError\nconst noTokenHandlerError = errorHandler.noTokenHandlerError; // no token provided handleError\nconst failedAuthHandlerError = errorHandler.failedAuthHandlerError; // failed Authentication handlerError\n\nconst upload = multer({\n  dest: './questionsUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a user\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'questionsUploads');\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) return incompleteFieldHandlerError(res, filePath);\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      question: req.body.question,\n      userId: decodedID,\n      tags: req.body.tags,\n      questionImage: filePath,\n    };\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then((results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (data.title === question.title) questionHandlerError(res, filePath);\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        Question.create(data) // pass data to our model\n          .then((result) => {\n            const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((e) => {\n            if (e.name === 'error' && e.constraint === 'questions_userid_fkey') return userNotPrestentHandlerError(res, filePath);\n            return createHandlerError(error, res, filePath);\n          });\n      }\n    }).catch(e => createHandlerError(error, res, filePath));\n  },\n  list(req, res) {\n    Question.findAll().then((results) => {\n      const questions = results.rows;\n      return res.status(200).send(questions);\n    }).catch(e => res.status(400).send(e));\n  },\n  retrieve() {\n\n  },\n};\n\nexport default questionsController;\n"]}