{"version":3,"sources":["answers.js"],"names":["models","Answer","errorHandler","createHandlerError","incompleteFieldHandlerError","fileTypeHandleError","fileSizeHandleError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","fsHelper","deleteFile","upload","dest","fileSizeLimit","answersController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","fileSizeError","fileTypeError","filePath","body","response","data","userId","questionId","params","answerImage","then","result","answer","rows","status","send","catch","error","name","constraint"],"mappings":";;;;;;ypBAAA;AACA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;WAEiB,CAACA,iBAAOC,MAAR,C;IAAVA,M;YAEsB,CAACC,uBAAaC,kBAAd,C;IAAtBA,kB,aAAyD;AAChE;;YACsC,CAACD,uBAAaE,2BAAd,C;IAA/BA,2B;YACuB,CAACF,uBAAaG,mBAAd,C;IAAvBA,mB,aAA2D;;YACpC,CAACH,uBAAaI,mBAAd,C;IAAvBA,mB,aAA2D;AAClE;;YACsC,CAACJ,uBAAaK,2BAAd,C;IAA/BA,2B;YACuB,CAACL,uBAAaM,mBAAd,C;IAAvBA,mB,aAA2D;AAClE;;YACiC,CAACN,uBAAaO,sBAAd,C;IAA1BA,sB;YAEc,CAACC,qBAASC,UAAV,C;IAAdA,U,aAAoC;;AAE3C,IAAMC,SAAS,sBAAO;AACpBC,QAAM;AADc,CAAP,CAAf;;AAIA,IAAMC,gBAAgB,OAAO,IAAP,GAAc,CAApC;;AAEA,IAAMC,oBAAoB;AACxBH,UAAQA,OAAOI,MAAP,CAAc,aAAd,CADgB,EACc;AACtCC,QAFwB,kBAEjBC,GAFiB,EAEZC,GAFY,EAEP;AAAE;AACjB,QAAIC,kBAAJ;AACA,QAAMC,aAAa,2BAAWH,GAAX,CAAnB;AACA,QAAMI,uBAAuBD,WAAW,CAAX,CAA7B;AACA,QAAME,kBAAkBF,WAAW,CAAX,CAAxB;AACA,QAAMG,sBAAsBH,WAAW,CAAX,CAA5B;;AAEA,QAAIC,oBAAJ,EAA0B,OAAOd,oBAAoBW,GAApB,CAAP;AAC1B,QAAII,eAAJ,EAAqB,OAAOd,uBAAuBU,GAAvB,CAAP;AACrB,QAAIK,mBAAJ,EAAyBJ,YAAYI,mBAAZ;AACzB;;AAVe,4BAWkC,0BAAiBN,GAAjB,EAAsBJ,aAAtB,EAAqC,gBAArC,CAXlC;AAAA;AAAA,QAWRW,aAXQ;AAAA,QAWOC,aAXP;AAAA,QAWsBC,QAXtB;;AAYf,QAAIF,aAAJ,EAAmB,OAAOnB,oBAAoBa,GAApB,CAAP;AACnB,QAAIO,aAAJ,EAAmB,OAAOrB,oBAAoBc,GAApB,CAAP;AACnB;AACA,QAAI,CAACD,IAAIU,IAAJ,CAASC,QAAd,EAAwB,OAAOzB,4BAA4Be,GAA5B,EAAiCQ,QAAjC,CAAP;;AAExB,QAAMG,OAAO,EAAE;AACbD,gBAAUX,IAAIU,IAAJ,CAASC,QADR;AAEXE,cAAQX,SAFG;AAGXY,kBAAYd,IAAIe,MAAJ,CAAWD,UAHZ;AAIXE,mBAAaP;AAJF,KAAb;AAMA1B,WAAOgB,MAAP,CAAca,IAAd,EAAoB;AAApB,KACQK,IADR,CACa,UAACC,MAAD,EAAY;AAChB,UAAMC,SAASD,OAAOE,IAAP,CAAY,CAAZ,CAAf;AACA,aAAOnB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CAAP;AACD,KAJR,EAIUI,KAJV,CAIgB,UAACC,KAAD,EAAW;AAClB,UAAIA,MAAMC,IAAN,KAAe,OAAf,IAA0BD,MAAME,UAAN,KAAqB,qBAAnD,EAA0E;AACxE,eAAOrC,4BAA4BY,GAA5B,EAAiCQ,QAAjC,CAAP;AACD;AACD,aAAOxB,mBAAmBuC,KAAnB,EAA0BvB,GAA1B,EAA+BQ,QAA/B,CAAP;AACD,KATR;AAUD;AAnCuB,CAA1B;;kBAsCeZ,iB","file":"answers.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport fsHelper from '../../utilities/fileSystem';\n\nconst [Answer] = [models.Answer];\n\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [fileTypeHandleError] = [errorHandler.fileTypeHandleError]; // file type handleError\nconst [fileSizeHandleError] = [errorHandler.fileSizeHandleError]; // file size handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n\nconst [deleteFile] = [fsHelper.deleteFile];// Delete file helper method\n\nconst upload = multer({\n  dest: './answersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst answersController = {\n  upload: upload.single('answerImage'), // image upload\n  create(req, res) { // create a answer\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'answersUploads');\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.response) return incompleteFieldHandlerError(res, filePath);\n\n    const data = { // Grab data from http request\n      response: req.body.response,\n      userId: decodedID,\n      questionId: req.params.questionId,\n      answerImage: filePath,\n    };\n    Answer.create(data) // pass data to our model\n           .then((result) => {\n             const answer = result.rows[0];\n             return res.status(201).send(answer);\n           }).catch((error) => {\n             if (error.name === 'error' && error.constraint === 'answers_userid_fkey') {\n               return userNotPrestentHandlerError(res, filePath);\n             }\n             return createHandlerError(error, res, filePath);\n           });\n  },\n};\n\nexport default answersController;\n"]}