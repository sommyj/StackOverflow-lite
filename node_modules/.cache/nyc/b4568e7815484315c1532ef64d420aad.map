{"version":3,"sources":["questions.js"],"names":["models","Question","renameFile","fsHelper","deleteFile","upload","dest","fileSizeLimit","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","tempPath","path","targetPath","Date","toISOString","originalname","mimetype","size","substring","length","authMethod","authMethodArray","noTokenProviderError","failedAuth","decodedID","token","body","query","headers","jwt","verify","app","get","err","decoded","id","questionsController","single","create","authValues","failedAuthError","decodedIDFromMethod","send","auth","title","question","tags","data","userId","questionImage","findAll","then","results","questions","rows","questionCount","result","catch","e","name","constraint","list"],"mappings":"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","file":"questions.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport jwt from 'jsonwebtoken';\nimport models from '../models';\nimport app from '../../app';\nimport fsHelper from './utilities/fileSystem';\n\nconst [Question] = [models.Question];\nconst renameFile = fsHelper.renameFile;\nconst deleteFile = fsHelper.deleteFile;\n\nconst upload = multer({\n  dest: './questionsUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false, fileTypeError = false, filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./questionsUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else { deleteFile(tempPath); fileSizeError = true; }\n    } else { deleteFile(tempPath); fileTypeError = true; }\n  }\n  fileErrorArray[0] = fileSizeError; fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n/* Authentication handle method */\nconst authMethod = (req) => {\n  const authMethodArray = [];\n  let noTokenProviderError = false;\n  let failedAuth = false;\n  let decodedID;\n\n  // check header or url parameters or post parameters for token\n  const token = req.body.token || req.query.token || req.headers['x-access-token'];\n  if (!token) {\n    if (req.file) deleteFile(`./${req.file.path}`);\n    noTokenProviderError = true;\n  }\n\n  // verifies secret and checks exp\n  jwt.verify(token, app.get('superSecret'), (err, decoded) => {\n    if (err) {\n      if (!noTokenProviderError) {\n        if (req.file) deleteFile(`./${req.file.path}`);\n        failedAuth = true;\n      }\n    } else decodedID = decoded.id;\n  });\n\n  authMethodArray[0] = noTokenProviderError;\n  authMethodArray[1] = failedAuth;\n  authMethodArray[2] = decodedID;\n\n  return authMethodArray;\n};\n\nconst questionsController = {\n  upload: upload.single('questionImage'), // image upload\n  create(req, res) { // create a user\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    if (failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req);\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n\n    /* Required feilds */\n    if (!req.body.title || !req.body.question || !req.body.tags) {\n      if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      question: req.body.question,\n      userId: decodedID,\n      tags: req.body.tags,\n      questionImage: filePath,\n    };\n\n    /* Search to see if question title exist before creation\n    to avoid skipping of id on unique constraint */\n    Question.findAll().then((results) => {\n      const questions = results.rows; let questionCount = 0;\n      for (const question of questions) {\n        if (data.title === question.title) {\n          if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n          return res.status(400).send({ message: 'question already exists' });\n        }\n        questionCount += 1;\n      }\n      if (questionCount === questions.length) { // Create question after checking if it exist\n        Question.create(data) // pass data to our model\n          .then((result) => {\n            const question = result.rows[0];\n            return res.status(201).send(question);\n          }).catch((e) => {\n            if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n            if (e.name === 'error' && e.constraint === 'questions_userid_fkey') {\n              return res.status(400).send({ message: 'user has been removed from the database' });\n            }\n            return res.status(400).send(e);\n          });\n      }\n    }).catch(e => res.status(400).send(e));\n  },\n  list(req, res) {\n    Question.findAll().then((results) => {\n      const questions = results.rows;\n      return res.status(200).send(questions);\n    }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default questionsController;\n"]}