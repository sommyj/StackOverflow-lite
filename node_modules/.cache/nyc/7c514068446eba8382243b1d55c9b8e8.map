{"version":3,"sources":["users.js"],"names":["models","User","renameFile","fsHelper","deleteFile","incompleteFieldHandlerError","errorHandler","fileTypeHandleError","fileSizeHandleError","usernameHandlerError","emailHandlerError","phoneHandlerError","upload","dest","fileSizeLimit","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","tempPath","path","targetPath","Date","toISOString","originalname","mimetype","size","substring","length","usersController","single","create","res","body","username","password","email","gender","hashedPassword","bcrypt","hashSync","data","title","firstname","lastname","country","phone","userImage","findAll","then","results","users","rows","userCount","user","result","status","send","auth","catch","e","check","findOne","where","message","passIsEqual","compareSync"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport models from '../models';\nimport app from '../../app';\nimport fsHelper from '../../utilities/fileSystem';\nimport errorHandler from './utilities/errorHandler';\n\nconst [User] = [models.User];\nconst renameFile = fsHelper.renameFile;//Rename file helper method\nconst deleteFile = fsHelper.deleteFile;//Delete file helper method\n\nconst incompleteFieldHandlerError = errorHandler.incompleteFieldHandlerError //incomplete field handleError\nconst fileTypeHandleError = errorHandler.fileTypeHandleError //file type handleError\nconst fileSizeHandleError = errorHandler.fileSizeHandleError //file size handleError\nconst usernameHandlerError = errorHandler.usernameHandlerError //username handleError\nconst emailHandlerError = errorHandler.emailHandlerError //email handleError\nconst phoneHandlerError = errorHandler.phoneHandlerError //phone handleError\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false, fileTypeError = false, filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else { deleteFile(tempPath); fileSizeError = true; }\n    } else { deleteFile(tempPath); fileTypeError = true; }\n  }\n  fileErrorArray[0] = fileSizeError; fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  create(req, res) { // create a user\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req);\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.username || !req.body.password || !req.body.email || !req.body.gender) {\n      return incompleteFieldHandlerError(res, filePath);\n      // if (filePath) deleteFile(`./${filePath}`); // if file uploads delete it\n      // return res.status(206).send({ message: 'Incomplete field' });\n    }\n    // Auto-gen a salt and hash\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    // Grab data from http request\n    const data = {\n      title: req.body.title,\n      firstname: req.body.firstname,\n      lastname: req.body.lastname,\n      username: req.body.username,\n      password: hashedPassword,\n      email: req.body.email,\n      gender: req.body.gender,\n      country: req.body.country,\n      phone: req.body.phone,\n      userImage: filePath\n    };\n    /* Search to see if username, email and phone exist before creation\n    to avoid skipping of id on unique constraint */\n    User.findAll().then((results) => { const users = results.rows;\n      let userCount = 0;\n      for (const user of users) {\n        if (data.username === user.username) return usernameHandlerError(res, filePath);\n        if (data.email === user.email) return emailHandlerError(res, filePath);\n        if (data.phone === user.phone) return phoneHandlerError(res, filePath);\n        userCount += 1;\n      }\n      if (userCount === users.length) { // Create user after checking if it exist\n        User.create(data) // pass data to our model\n          .then((result) => { const user = result.rows[0];\n            const token = tokenMethod(user.id); // Generate token\n            if (token) return res.status(201).send({ user, auth: true, token });\n          }).catch(e => res.status(400).send(e));\n      }\n    }).catch(e => res.status(400).send(e));\n  },\n  check(req, res) { // login with username and password\n    // pass data to our model\n    User.findOne({ where: { username: req.body.username } })\n      .then((result) => {\n        const user = result.rows[0];\n        // Returning error message for user not found\n        if (!user) return res.status(400).send({ message: 'Invalid username/password' });\n        // Compare hash from your password DB.\n        const passIsEqual = bcrypt.compareSync(req.body.password, user.password);\n        if (!passIsEqual) return res.status(404).send({ message: 'Invalid username/password' });\n        const token = tokenMethod(user.id); // Generate token\n        // Returning user detais\n        if (token) return res.status(200).send({ user, auth: true, token });\n      }).catch(e => res.status(400).send(e));\n  },\n};\n\nexport default usersController;\n"]}