{"version":3,"sources":["answers.js"],"names":["models","Answer","Question","errorHandler","createHandlerError","incompleteFieldHandlerError","notFoundHandlerError","fileTypeHandleError","fileSizeHandleError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","fsHelper","deleteFile","upload","dest","fileSizeLimit","answersController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","fileSizeError","fileTypeError","filePath","body","response","data","userId","questionId","params","answerImage","then","result","answer","rows","status","send","catch","error","name","constraint","update","findById","question","result1","answerId","result2","userid","accepted","id","vote","answerimage","result3","previousImage","result4","auth","message"],"mappings":"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","file":"answers.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport fsHelper from '../../utilities/fileSystem';\n\nconst [Answer] = [models.Answer];\nconst [Question] = [models.Question];\n\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [notFoundHandlerError] = [errorHandler.notFoundHandlerError];\nconst [fileTypeHandleError] = [errorHandler.fileTypeHandleError]; // file type handleError\nconst [fileSizeHandleError] = [errorHandler.fileSizeHandleError]; // file size handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n\nconst [deleteFile] = [fsHelper.deleteFile];// Delete file helper method\n\nconst upload = multer({\n  dest: './answersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst answersController = {\n  upload: upload.single('answerImage'), // image upload\n  create(req, res) { // create a answer\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'answersUploads');\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n    /* Required feilds */\n    if (!req.body.response) return incompleteFieldHandlerError(res, filePath);\n\n    const data = { // Grab data from http request\n      response: req.body.response,\n      userId: decodedID,\n      questionId: req.params.questionId,\n      answerImage: filePath,\n    };\n    Answer.create(data) // pass data to our model\n      .then((result) => {\n        const answer = result.rows[0];\n        return res.status(201).send(answer);\n      }).catch((error) => {\n        if (error.name === 'error' && error.constraint === 'answers_userid_fkey') {\n          return userNotPrestentHandlerError(res, filePath);\n        }\n        return createHandlerError(error, res, filePath);\n      });\n  },\n  update(req, res) { // update business\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n    // implementing the file filter method\n    const [fileSizeError, fileTypeError, filePath] = fileFilterMethod(req, fileSizeLimit, 'answersUploads');\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n\n    Question.findById(req.params.questionId).then(result1 => {\n      const question = result1.rows[0];\n      if (!question) return notFoundHandlerError('question', res, filePath);\n      Answer.findById(req.params.answerId).then(result2 => {\n        const answer = result2.rows[0];\n        if (!answer) return notFoundHandlerError('answer', res, filePath);\n        //For accepting an answer by the author of the question\n        if (decodedID === question.userid && req.body.accepted) {\n          return Answer.update({\n            id: answer.id,\n            response: answer.response,\n            accepted: req.body.accepted || answer.accepted,\n            vote: answer.vote,\n            answerImage: answer.answerimage,\n          }).then(result3 => res.status(200).send(result3.rows[0]))\n          .catch(error => createHandlerError(error, res, filePath));\n        }\n        //For updating an answer by the author of the answer\n        if (decodedID === answer.userid) {\n          // holds the url of the image before update in other not to loose it\n        const previousImage = answer.answerimage;\n          return Answer.update({\n            id: answer.id,\n            response: req.body.response || answer.response,\n            accepted: answer.accepted,\n            vote: answer.vote,\n            answerImage: filePath || answer.answerimage,\n\n          }).then(result4 => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) deleteFile(`./${previousImage}`);\n            }\n            return res.status(200).send(result4.rows[0])})\n          .catch(error => createHandlerError(error, res, filePath));\n        }\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n\n      }).catch(error => createHandlerError(error, res, filePath));\n      }).catch(error => createHandlerError(error, res, filePath));\n  }\n};\n\nexport default answersController;\n"]}