{"version":3,"sources":["answers.js"],"names":["models","Answer","Question","imageStorage","uploadImageToStorage","deleteImageFromStorage","getImageFromStorage","errorHandler","createHandlerError","incompleteFieldHandlerError","notFoundHandlerError","fileHandleError","userNotPrestentHandlerError","noTokenHandlerError","failedAuthHandlerError","upload","storage","multer","memoryStorage","fileSizeLimit","answersController","single","create","req","res","decodedID","authValues","noTokenProviderError","failedAuthError","decodedIDFromMethod","body","response","fileName","file","fileError","console","error","status","send","data","userId","questionId","params","answerImage","then","result","answer","rows","catch","name","constraint","update","findById","result1","question","answerId","result2","userid","accepted","id","vote","answerimage","result3","filePath","previousImage","result4","auth","message"],"mappings":"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","file":"answers.js","sourceRoot":"/home/somto/1Projects/mentorship project/StackOverflow-lite/server/server/controllers","sourcesContent":["/*  eslint import/no-cycle: [2, { maxDepth: 1 }]  */\n/* eslint-disable no-restricted-syntax */\nimport multer from 'multer';\nimport models from '../models';\nimport errorHandler from './utilities/errorHandler';\nimport fileFilterMethod from './utilities/fileFilter';\nimport authMethod from './utilities/authHandler';\nimport imageStorage from './utilities/filebaseStorage';\n\nconst [Answer] = [models.Answer];\nconst [Question] = [models.Question];\nconst [uploadImageToStorage] = [imageStorage.uploadImageToStorage];\nconst [deleteImageFromStorage] = [imageStorage.deleteImageFromStorage];\nconst [getImageFromStorage] = [imageStorage.getImageFromStorage];\nconst [createHandlerError] = [errorHandler.createHandlerError]; // create handleError\n// incomplete field handleError\nconst [incompleteFieldHandlerError] = [errorHandler.incompleteFieldHandlerError];\nconst [notFoundHandlerError] = [errorHandler.notFoundHandlerError];\nconst [fileHandleError] = [errorHandler.fileHandleError]; // file handleError\n// user deleted handleError\nconst [userNotPrestentHandlerError] = [errorHandler.userNotPrestentHandlerError];\nconst [noTokenHandlerError] = [errorHandler.noTokenHandlerError]; // no token provided handleError\n// failed Authentication handlerError\nconst [failedAuthHandlerError] = [errorHandler.failedAuthHandlerError];\n\nconst upload = multer({\n  storage: multer.memoryStorage()\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\nconst answersController = {\n  upload: upload.single('answerImage'), // image upload\n  async create(req, res) { // create a answer\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    /* Required feilds */\n    if (!req.body.response) return incompleteFieldHandlerError(res);\n\n    let fileName = '';\n    let file = req.file;\n    if (file) {\n      // implementing the file filter method\n      const fileError = fileFilterMethod(req, fileSizeLimit);\n      if(fileError) return fileHandleError(res, fileError);\n      try {\n        fileName = await uploadImageToStorage(file, 'answerImages');\n      } catch(error) {\n        console.error(error);\n        return res.status(400).send(error);\n      }\n    }\n\n    const data = { // Grab data from http request\n      response: req.body.response,\n      userId: decodedID,\n      questionId: req.params.questionId,\n      answerImage: fileName,\n    };\n    Answer.create(data) // pass data to our model\n      .then((result) => {\n        const answer = result.rows[0];\n        return res.status(201).send(answer);\n      }).catch((error) => {\n        if (error.name === 'error' && error.constraint === 'answers_userid_fkey') {\n          return userNotPrestentHandlerError(res, fileName);\n        }\n        return createHandlerError(error, res, fileName);\n      });\n  },\n  update(req, res) { // update business\n    let decodedID;\n    const authValues = authMethod(req);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if (noTokenProviderError) return noTokenHandlerError(res);\n    if (failedAuthError) return failedAuthHandlerError(res);\n    if (decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    Question.findById(req.params.questionId).then((result1) => {\n      const question = result1.rows[0];\n      if (!question) return notFoundHandlerError('question', res);\n      Answer.findById(req.params.answerId).then(async (result2) => {\n        const answer = result2.rows[0];\n        if (!answer) return notFoundHandlerError('answer', res);\n        // For accepting an answer by the author of the question\n        if (decodedID === question.userid && req.body.accepted) {\n          return Answer.update({\n            id: answer.id,\n            response: answer.response,\n            accepted: req.body.accepted || answer.accepted,\n            vote: answer.vote,\n            answerImage: answer.answerimage,\n          }).then(result3 => res.status(200).send(result3.rows[0]))\n            .catch(error => createHandlerError(error, res, filePath));\n        }\n        // For updating an answer by the author of the answer\n        if (decodedID === answer.userid) {\n          let fileName;\n          let file = req.file;\n          // holds the url of the image before update in other not to loose it\n          const previousImage = answer.answerimage;\n\n          if (file) {\n            // implementing the file filter method\n            const fileError = fileFilterMethod(req, fileSizeLimit);\n            if(fileError) return fileHandleError(res, fileError);\n            try {\n              fileName = await uploadImageToStorage(file, 'answerImages');\n            } catch(error) {\n              console.error(error);\n              return res.status(400).send(error);\n            }\n          }\n\n          return Answer.update({\n            id: answer.id,\n            response: req.body.response || answer.response,\n            accepted: answer.accepted,\n            vote: answer.vote,\n            answerImage: fileName || answer.answerimage,\n          }).then(async (result4) => {\n            // if file and url is not empty delete img for updation\n            if (fileName) {\n              if (previousImage) {//deleteFile(`./${previousImage}`);\n                try{\n                  await deleteImageFromStorage(previousImage);\n                } catch(error){\n                  console.error(error);\n                  return res.status(400).send(error);\n                }\n              }\n            }\n            return res.status(200).send(result4.rows[0]);\n          }).catch(error => createHandlerError(error, res, fileName));\n        }\n        return res.status(403).send({ auth: false, message: 'User not allowed' });\n      }).catch(error => createHandlerError(error, res));\n    }).catch(error => createHandlerError(error, res));\n  }\n};\n\nexport default answersController;\n"]}